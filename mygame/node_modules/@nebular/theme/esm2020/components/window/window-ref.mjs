import { ReplaySubject, Subject } from 'rxjs';
import { NbWindowState } from './window.options';
/**
 * The `NbWindowRef` helps to manipulate window after it was created.
 * The window can be dismissed by using `close` method of the windowRef.
 * You can access rendered component as `componentRef` property of the windowRef.
 * Property `contentInstance` contains the instance of the component opened in the window.
 */
export class NbWindowRef {
    /**
     * Current window state.
     */
    get state() {
        return this.stateValue;
    }
    set state(newState) {
        if (newState && this.stateValue !== newState) {
            this.prevStateValue = this.state;
            this.stateValue = newState;
            this.stateChange$.next({ oldState: this.prevStateValue, newState });
        }
    }
    /**
     * Emits when window state change.
     */
    get stateChange() {
        return this.stateChange$.asObservable();
    }
    /**
     * Emits when window was closed.
     */
    get onClose() {
        return this.closed$.asObservable();
    }
    constructor(config) {
        this.config = config;
        this.stateChange$ = new ReplaySubject(1);
        this._closed = false;
        this.closed$ = new Subject();
        this.state = config.initialState;
    }
    /**
     * Minimize window.
     */
    minimize() {
        this.state = NbWindowState.MINIMIZED;
    }
    /**
     * Maximize window.
     */
    maximize() {
        this.state = NbWindowState.MAXIMIZED;
    }
    /**
     * Set window on top.
     */
    fullScreen() {
        this.state = NbWindowState.FULL_SCREEN;
    }
    toPreviousState() {
        this.state = this.prevStateValue;
    }
    /**
     * Closes window.
     * */
    close(res) {
        if (this._closed) {
            return;
        }
        this._closed = true;
        this.componentRef.destroy();
        this.componentInstance = null;
        this.stateChange$.complete();
        this.closed$.next(res);
        this.closed$.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvdGhlbWUvY29tcG9uZW50cy93aW5kb3cvd2luZG93LXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWMsYUFBYSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUxRCxPQUFPLEVBQWtCLGFBQWEsRUFBdUIsTUFBTSxrQkFBa0IsQ0FBQztBQUV0Rjs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBTXRCOztPQUVHO0lBQ0gsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFDRCxJQUFJLEtBQUssQ0FBQyxRQUF1QjtRQUMvQixJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtZQUM1QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQztJQUdEOztPQUVHO0lBQ0gsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFJRDs7T0FFRztJQUNILElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsWUFBbUIsTUFBc0I7UUFBdEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFqQi9CLGlCQUFZLEdBQUcsSUFBSSxhQUFhLENBQXNCLENBQUMsQ0FBQyxDQUFDO1FBUXpELFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFLLENBQUM7UUFTbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7U0FFSztJQUNMLEtBQUssQ0FBQyxHQUFPO1FBQ1gsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYldpbmRvd0NvbXBvbmVudCB9IGZyb20gJy4vd2luZG93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYldpbmRvd0NvbmZpZywgTmJXaW5kb3dTdGF0ZSwgTmJXaW5kb3dTdGF0ZUNoYW5nZSB9IGZyb20gJy4vd2luZG93Lm9wdGlvbnMnO1xuXG4vKipcbiAqIFRoZSBgTmJXaW5kb3dSZWZgIGhlbHBzIHRvIG1hbmlwdWxhdGUgd2luZG93IGFmdGVyIGl0IHdhcyBjcmVhdGVkLlxuICogVGhlIHdpbmRvdyBjYW4gYmUgZGlzbWlzc2VkIGJ5IHVzaW5nIGBjbG9zZWAgbWV0aG9kIG9mIHRoZSB3aW5kb3dSZWYuXG4gKiBZb3UgY2FuIGFjY2VzcyByZW5kZXJlZCBjb21wb25lbnQgYXMgYGNvbXBvbmVudFJlZmAgcHJvcGVydHkgb2YgdGhlIHdpbmRvd1JlZi5cbiAqIFByb3BlcnR5IGBjb250ZW50SW5zdGFuY2VgIGNvbnRhaW5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IG9wZW5lZCBpbiB0aGUgd2luZG93LlxuICovXG5leHBvcnQgY2xhc3MgTmJXaW5kb3dSZWY8VCA9IGFueSwgUiA9IGFueT4ge1xuICBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxOYldpbmRvd0NvbXBvbmVudD47XG4gIGNvbXBvbmVudEluc3RhbmNlOiBUO1xuXG4gIHByb3RlY3RlZCBwcmV2U3RhdGVWYWx1ZTogTmJXaW5kb3dTdGF0ZTtcbiAgcHJvdGVjdGVkIHN0YXRlVmFsdWU6IE5iV2luZG93U3RhdGU7XG4gIC8qKlxuICAgKiBDdXJyZW50IHdpbmRvdyBzdGF0ZS5cbiAgICovXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVZhbHVlO1xuICB9XG4gIHNldCBzdGF0ZShuZXdTdGF0ZTogTmJXaW5kb3dTdGF0ZSkge1xuICAgIGlmIChuZXdTdGF0ZSAmJiB0aGlzLnN0YXRlVmFsdWUgIT09IG5ld1N0YXRlKSB7XG4gICAgICB0aGlzLnByZXZTdGF0ZVZhbHVlID0gdGhpcy5zdGF0ZTtcbiAgICAgIHRoaXMuc3RhdGVWYWx1ZSA9IG5ld1N0YXRlO1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZSQubmV4dCh7IG9sZFN0YXRlOiB0aGlzLnByZXZTdGF0ZVZhbHVlLCBuZXdTdGF0ZSB9KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGVDaGFuZ2UkID0gbmV3IFJlcGxheVN1YmplY3Q8TmJXaW5kb3dTdGF0ZUNoYW5nZT4oMSk7XG4gIC8qKlxuICAgKiBFbWl0cyB3aGVuIHdpbmRvdyBzdGF0ZSBjaGFuZ2UuXG4gICAqL1xuICBnZXQgc3RhdGVDaGFuZ2UoKTogT2JzZXJ2YWJsZTxOYldpbmRvd1N0YXRlQ2hhbmdlPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVDaGFuZ2UkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9jbG9zZWQgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGNsb3NlZCQgPSBuZXcgU3ViamVjdDxSPigpO1xuICAvKipcbiAgICogRW1pdHMgd2hlbiB3aW5kb3cgd2FzIGNsb3NlZC5cbiAgICovXG4gIGdldCBvbkNsb3NlKCkge1xuICAgIHJldHVybiB0aGlzLmNsb3NlZCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlnOiBOYldpbmRvd0NvbmZpZykge1xuICAgIHRoaXMuc3RhdGUgPSBjb25maWcuaW5pdGlhbFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1pbmltaXplIHdpbmRvdy5cbiAgICovXG4gIG1pbmltaXplKCkge1xuICAgIHRoaXMuc3RhdGUgPSBOYldpbmRvd1N0YXRlLk1JTklNSVpFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXhpbWl6ZSB3aW5kb3cuXG4gICAqL1xuICBtYXhpbWl6ZSgpIHtcbiAgICB0aGlzLnN0YXRlID0gTmJXaW5kb3dTdGF0ZS5NQVhJTUlaRUQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHdpbmRvdyBvbiB0b3AuXG4gICAqL1xuICBmdWxsU2NyZWVuKCkge1xuICAgIHRoaXMuc3RhdGUgPSBOYldpbmRvd1N0YXRlLkZVTExfU0NSRUVOO1xuICB9XG5cbiAgdG9QcmV2aW91c1N0YXRlKCkge1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByZXZTdGF0ZVZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB3aW5kb3cuXG4gICAqICovXG4gIGNsb3NlKHJlcz86IFIpIHtcbiAgICBpZiAodGhpcy5fY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZSQuY29tcGxldGUoKTtcbiAgICB0aGlzLmNsb3NlZCQubmV4dChyZXMpO1xuICAgIHRoaXMuY2xvc2VkJC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=