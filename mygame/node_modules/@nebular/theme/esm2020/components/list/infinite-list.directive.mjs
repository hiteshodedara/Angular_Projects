import { Directive, Input, HostListener, EventEmitter, Output, ContentChildren, } from '@angular/core';
import { forkJoin, of as observableOf, interval, timer, Subject, merge, BehaviorSubject } from 'rxjs';
import { filter, switchMap, map, takeUntil, take, throttle } from 'rxjs/operators';
import { convertToBoolProperty } from '../helpers';
import { NbListItemComponent } from './list.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/scroll.service";
import * as i2 from "../../services/ruler.service";
export class NbScrollableContainerDimensions {
}
/**
 * Infinite List Directive
 *
 * ```html
 *  <nb-list nbInfiniteList [threshold]="500" (bottomThreshold)="loadNext()">
 *    <nb-list-item *ngFor="let item of items"></nb-list-item>
 *  </nb-list>
 * ```
 *
 * @stacked-example(Simple infinite list, infinite-list/infinite-list-showcase.component)
 *
 * Directive will notify when list scrolled up or down to a given threshold.
 * By default it listen to scroll of list on which applied, but also can be set to listen to window scroll.
 *
 * @stacked-example(Scroll modes, infinite-list/infinite-list-scroll-modes.component)
 *
 * To improve UX of infinite lists, it's better to keep current page in url,
 * so user able to return to the last viewed page or to share a link to this page.
 * `nbListPageTracker` directive will help you to know, what page user currently viewing.
 * Just put it on a list, set page size and it will calculate page that currently in viewport.
 * You can [open the example](example/infinite-list/infinite-news-list.component)
 * in a new tab to check out this feature.
 *
 * @stacked-example(Infinite list with pager, infinite-list/infinite-news-list.component)
 *
 * @stacked-example(Infinite list with placeholders at the top, infinite-list/infinite-list-placeholders.component)
 *
 */
export class NbInfiniteListDirective {
    get elementScroll() {
        return !this.windowScroll;
    }
    /**
     * Prevent subsequent bottom/topThreshold emissions for specified duration after emitting once.
     * In milliseconds.
     */
    set throttleTime(value) {
        this.throttleTime$.next(value);
    }
    get throttleTime() {
        return this.throttleTime$.value;
    }
    /**
     * By default component observes list scroll position.
     * If set to `true`, component will observe position of page scroll instead.
     */
    set listenWindowScroll(value) {
        this.windowScroll = convertToBoolProperty(value);
    }
    onElementScroll() {
        if (this.elementScroll) {
            this.elementScroll$.next();
        }
    }
    constructor(elementRef, scrollService, dimensionsService) {
        this.elementRef = elementRef;
        this.scrollService = scrollService;
        this.dimensionsService = dimensionsService;
        this.destroy$ = new Subject();
        this.windowScroll = false;
        this.elementScroll$ = new Subject();
        this.windowScroll$ = this.scrollService.onScroll().pipe(filter(() => this.windowScroll));
        this.bottomThreshold$ = new Subject();
        this.topThreshold$ = new Subject();
        this.throttleTime$ = new BehaviorSubject(0);
        /**
         * Emits when distance between list bottom and current scroll position is less than threshold.
         */
        this.bottomThreshold = new EventEmitter(true);
        /**
         * Emits when distance between list top and current scroll position is less than threshold.
         */
        this.topThreshold = new EventEmitter(true);
    }
    ngAfterViewInit() {
        merge(this.windowScroll$, this.elementScroll$)
            .pipe(switchMap(() => this.getContainerDimensions()), takeUntil(this.destroy$))
            .subscribe((dimensions) => this.checkPosition(dimensions));
        this.throttleTime$
            .pipe(switchMap(() => this.topThreshold$.pipe(throttle(() => interval(this.throttleTime)))), takeUntil(this.destroy$))
            .subscribe(() => {
            this.topThreshold.emit();
        });
        this.throttleTime$
            .pipe(switchMap(() => this.bottomThreshold$.pipe(throttle(() => interval(this.throttleTime)))), takeUntil(this.destroy$))
            .subscribe(() => {
            this.bottomThreshold.emit();
        });
        this.listItems.changes
            .pipe(
        // For some reason, changes are emitted before list item removed from dom,
        // so dimensions will be incorrect.
        // Check every 50ms for a second if dom and query are in sync.
        // Once they synchronized, we can get proper dimensions.
        switchMap(() => interval(50).pipe(filter(() => this.inSyncWithDom()), take(1), takeUntil(timer(1000)))), switchMap(() => this.getContainerDimensions()), takeUntil(this.destroy$))
            .subscribe((dimensions) => this.checkPosition(dimensions));
        this.getContainerDimensions().subscribe((dimensions) => this.checkPosition(dimensions));
    }
    ngOnDestroy() {
        this.topThreshold$.complete();
        this.bottomThreshold$.complete();
        this.elementScroll$.complete();
        this.destroy$.next();
        this.destroy$.complete();
    }
    checkPosition({ scrollHeight, scrollTop, clientHeight }) {
        const initialCheck = this.lastScrollPosition == null;
        const manualCheck = this.lastScrollPosition === scrollTop;
        const scrollUp = scrollTop < this.lastScrollPosition;
        const scrollDown = scrollTop > this.lastScrollPosition;
        const distanceToBottom = scrollHeight - scrollTop - clientHeight;
        if ((initialCheck || manualCheck || scrollDown) && distanceToBottom <= this.threshold) {
            this.bottomThreshold$.next();
        }
        if ((initialCheck || scrollUp) && scrollTop <= this.threshold) {
            this.topThreshold$.next();
        }
        this.lastScrollPosition = scrollTop;
    }
    getContainerDimensions() {
        if (this.elementScroll) {
            const { scrollTop, scrollHeight, clientHeight } = this.elementRef.nativeElement;
            return observableOf({ scrollTop, scrollHeight, clientHeight });
        }
        return forkJoin([this.scrollService.getPosition(), this.dimensionsService.getDimensions()]).pipe(map(([scrollPosition, dimensions]) => ({
            scrollTop: scrollPosition.y,
            scrollHeight: dimensions.scrollHeight,
            clientHeight: dimensions.clientHeight,
        })));
    }
    inSyncWithDom() {
        return this.elementRef.nativeElement.children.length === this.listItems.length;
    }
}
NbInfiniteListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbInfiniteListDirective, deps: [{ token: i0.ElementRef }, { token: i1.NbLayoutScrollService }, { token: i2.NbLayoutRulerService }], target: i0.ɵɵFactoryTarget.Directive });
NbInfiniteListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: NbInfiniteListDirective, selector: "[nbInfiniteList]", inputs: { threshold: "threshold", throttleTime: "throttleTime", listenWindowScroll: "listenWindowScroll" }, outputs: { bottomThreshold: "bottomThreshold", topThreshold: "topThreshold" }, host: { listeners: { "scroll": "onElementScroll()" } }, queries: [{ propertyName: "listItems", predicate: NbListItemComponent }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbInfiniteListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[nbInfiniteList]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NbLayoutScrollService }, { type: i2.NbLayoutRulerService }]; }, propDecorators: { threshold: [{
                type: Input
            }], throttleTime: [{
                type: Input
            }], listenWindowScroll: [{
                type: Input
            }], bottomThreshold: [{
                type: Output
            }], topThreshold: [{
                type: Output
            }], onElementScroll: [{
                type: HostListener,
                args: ['scroll']
            }], listItems: [{
                type: ContentChildren,
                args: [NbListItemComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,