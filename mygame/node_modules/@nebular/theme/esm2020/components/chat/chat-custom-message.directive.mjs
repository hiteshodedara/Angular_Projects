import { Directive, Input } from '@angular/core';
import { convertToBoolProperty } from '../helpers';
import * as i0 from "@angular/core";
import * as i1 from "./chat-custom-message.service";
function throwCustomMessageTypeIsRequired() {
    throw new Error('[nbCustomMessage]: custom message type is required.');
}
/**
 * `[nbCustomMessage]` directive should be used as a structural directive or should be applied to the `ng-template`:
 *
 * ```html
 * <div *nbCustomMessage="'my-custom-type'; let data">
 *   <!-- custom message -->
 * </div>
 * ```
 * or
 * ```html
 * <ng-template nbCustomMessage='my-custom-type' let-data>
 *   <!-- custom message -->
 * </ng-template>
 * ```
 */
export class NbChatCustomMessageDirective {
    /**
     * Defines a message type which should rendered with the custom message template.
     * @type {string}
     */
    get nbCustomMessage() {
        return this._type;
    }
    set nbCustomMessage(value) {
        this._type = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Disables generic message styles, such as round corners, text color, background, etc.,
     * so a custom message could be styled from the ground up.
     *
     * @type {boolean}
     */
    set nbCustomMessageNoStyles(value) {
        this._noStyles = convertToBoolProperty(value);
    }
    get nbCustomMessageNoStyles() {
        return this._noStyles;
    }
    get noStyles() {
        return this.nbCustomMessageNoStyles;
    }
    constructor(templateRef, customMessageService) {
        this.templateRef = templateRef;
        this.customMessageService = customMessageService;
        this._noStyles = false;
    }
    ngOnInit() {
        if (!this._type) {
            throwCustomMessageTypeIsRequired();
        }
        this.customMessageService.register(this.type, this);
    }
    ngOnDestroy() {
        this.customMessageService.unregister(this.type);
    }
}
NbChatCustomMessageDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbChatCustomMessageDirective, deps: [{ token: i0.TemplateRef }, { token: i1.NbChatCustomMessageService }], target: i0.ɵɵFactoryTarget.Directive });
NbChatCustomMessageDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: NbChatCustomMessageDirective, selector: "[nbCustomMessage]", inputs: { nbCustomMessage: "nbCustomMessage", nbCustomMessageNoStyles: "nbCustomMessageNoStyles" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbChatCustomMessageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[nbCustomMessage]`,
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i1.NbChatCustomMessageService }]; }, propDecorators: { nbCustomMessage: [{
                type: Input
            }], nbCustomMessageNoStyles: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC1jdXN0b20tbWVzc2FnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL3RoZW1lL2NvbXBvbmVudHMvY2hhdC9jaGF0LWN1c3RvbS1tZXNzYWdlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBa0MsTUFBTSxlQUFlLENBQUM7QUFFakYsT0FBTyxFQUFFLHFCQUFxQixFQUFrQixNQUFNLFlBQVksQ0FBQzs7O0FBR25FLFNBQVMsZ0NBQWdDO0lBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFJSCxNQUFNLE9BQU8sNEJBQTRCO0lBQ3ZDOzs7T0FHRztJQUNILElBQ0ksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksZUFBZSxDQUFDLEtBQWE7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUdELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUNJLHVCQUF1QixDQUFDLEtBQWM7UUFDeEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBSSx1QkFBdUI7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFJRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBbUIsV0FBNkIsRUFBWSxvQkFBZ0Q7UUFBekYsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVkseUJBQW9CLEdBQXBCLG9CQUFvQixDQUE0QjtRQVBsRyxjQUFTLEdBQVksS0FBSyxDQUFDO0lBTzBFLENBQUM7SUFFaEgsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsZ0NBQWdDLEVBQUUsQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7O3lIQWpEVSw0QkFBNEI7NkdBQTVCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUh4QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzJJQU9LLGVBQWU7c0JBRGxCLEtBQUs7Z0JBb0JGLHVCQUF1QjtzQkFEMUIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sUHJvcGVydHksIE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBOYkNoYXRDdXN0b21NZXNzYWdlU2VydmljZSB9IGZyb20gJy4vY2hhdC1jdXN0b20tbWVzc2FnZS5zZXJ2aWNlJztcblxuZnVuY3Rpb24gdGhyb3dDdXN0b21NZXNzYWdlVHlwZUlzUmVxdWlyZWQoKTogdm9pZCB7XG4gIHRocm93IG5ldyBFcnJvcignW25iQ3VzdG9tTWVzc2FnZV06IGN1c3RvbSBtZXNzYWdlIHR5cGUgaXMgcmVxdWlyZWQuJyk7XG59XG5cbi8qKlxuICogYFtuYkN1c3RvbU1lc3NhZ2VdYCBkaXJlY3RpdmUgc2hvdWxkIGJlIHVzZWQgYXMgYSBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZSBvciBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgYG5nLXRlbXBsYXRlYDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2ICpuYkN1c3RvbU1lc3NhZ2U9XCInbXktY3VzdG9tLXR5cGUnOyBsZXQgZGF0YVwiPlxuICogICA8IS0tIGN1c3RvbSBtZXNzYWdlIC0tPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqIG9yXG4gKiBgYGBodG1sXG4gKiA8bmctdGVtcGxhdGUgbmJDdXN0b21NZXNzYWdlPSdteS1jdXN0b20tdHlwZScgbGV0LWRhdGE+XG4gKiAgIDwhLS0gY3VzdG9tIG1lc3NhZ2UgLS0+XG4gKiA8L25nLXRlbXBsYXRlPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFtuYkN1c3RvbU1lc3NhZ2VdYCxcbn0pXG5leHBvcnQgY2xhc3MgTmJDaGF0Q3VzdG9tTWVzc2FnZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIERlZmluZXMgYSBtZXNzYWdlIHR5cGUgd2hpY2ggc2hvdWxkIHJlbmRlcmVkIHdpdGggdGhlIGN1c3RvbSBtZXNzYWdlIHRlbXBsYXRlLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgQElucHV0KClcbiAgZ2V0IG5iQ3VzdG9tTWVzc2FnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG4gIHNldCBuYkN1c3RvbU1lc3NhZ2UodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcbiAgfVxuICBwcm90ZWN0ZWQgX3R5cGU6IHN0cmluZztcblxuICBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGVzIGdlbmVyaWMgbWVzc2FnZSBzdHlsZXMsIHN1Y2ggYXMgcm91bmQgY29ybmVycywgdGV4dCBjb2xvciwgYmFja2dyb3VuZCwgZXRjLixcbiAgICogc28gYSBjdXN0b20gbWVzc2FnZSBjb3VsZCBiZSBzdHlsZWQgZnJvbSB0aGUgZ3JvdW5kIHVwLlxuICAgKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBuYkN1c3RvbU1lc3NhZ2VOb1N0eWxlcyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX25vU3R5bGVzID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbHVlKTtcbiAgfVxuICBnZXQgbmJDdXN0b21NZXNzYWdlTm9TdHlsZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX25vU3R5bGVzO1xuICB9XG4gIHByb3RlY3RlZCBfbm9TdHlsZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX25vU3R5bGVzOiBOYkJvb2xlYW5JbnB1dDtcblxuICBnZXQgbm9TdHlsZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubmJDdXN0b21NZXNzYWdlTm9TdHlsZXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIHByb3RlY3RlZCBjdXN0b21NZXNzYWdlU2VydmljZTogTmJDaGF0Q3VzdG9tTWVzc2FnZVNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLl90eXBlKSB7XG4gICAgICB0aHJvd0N1c3RvbU1lc3NhZ2VUeXBlSXNSZXF1aXJlZCgpO1xuICAgIH1cbiAgICB0aGlzLmN1c3RvbU1lc3NhZ2VTZXJ2aWNlLnJlZ2lzdGVyKHRoaXMudHlwZSwgdGhpcyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmN1c3RvbU1lc3NhZ2VTZXJ2aWNlLnVucmVnaXN0ZXIodGhpcy50eXBlKTtcbiAgfVxufVxuIl19