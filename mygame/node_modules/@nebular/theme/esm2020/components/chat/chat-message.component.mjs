/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { convertToBoolProperty } from '../helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "./chat-custom-message.service";
import * as i3 from "@angular/common";
import * as i4 from "./chat-message-text.component";
import * as i5 from "./chat-message-file.component";
import * as i6 from "./chat-message-quote.component";
import * as i7 from "./chat-message-map.component";
import * as i8 from "./chat-avatar.component";
/**
 * Chat message component.
 *
 * Multiple message types are available through a `type` property, such as
 * - text - simple text message
 * - file - could be a file preview or a file icon
 * if multiple files are provided grouped files are shown
 * - quote - quotes a message with specific quote styles
 * - map - shows a google map picture by provided [latitude] and [longitude] properties
 *
 * @stacked-example(Available Types, chat/chat-message-types-showcase.component)
 *
 * Message with attached files:
 * ```html
 * <nb-chat-message
 *   type="file"
 *   [files]="[ { url: '...' } ]"
 *   message="Hello world!">
 * </nb-chat-message>
 * ```
 *
 * Map message:
 * ```html
 * <nb-chat-message
 *   type="map"
 *   [latitude]="53.914"
 *   [longitude]="27.59"
 *   message="Here I am">
 * </nb-chat-message>
 * ```
 *
 * @styles
 *
 * chat-message-background:
 * chat-message-text-color:
 * chat-message-reply-background-color:
 * chat-message-reply-text-color:
 * chat-message-avatar-background-color:
 * chat-message-sender-text-color:
 * chat-message-quote-background-color:
 * chat-message-quote-text-color:
 * chat-message-file-text-color:
 * chat-message-file-background-color:
 */
export class NbChatMessageComponent {
    get _addReplyClass() {
        return this._areDefaultStylesEnabled() && this.reply;
    }
    get _addNotReplyClass() {
        return this._areDefaultStylesEnabled() && this.notReply;
    }
    get _addNoSpaceClass() {
        return this._areDefaultStylesEnabled() && !this.message;
    }
    get flyInOut() {
        return true;
    }
    get notReply() {
        return !this.reply;
    }
    /**
     * Determines if a message is a reply
     */
    get reply() {
        return this._reply;
    }
    set reply(value) {
        this._reply = convertToBoolProperty(value);
    }
    /**
     * Message send avatar
     * @type {string}
     */
    set avatar(value) {
        this.avatarStyle = value ? this.domSanitizer.bypassSecurityTrustStyle(`url(${value})`) : null;
    }
    constructor(domSanitizer, customMessageService) {
        this.domSanitizer = domSanitizer;
        this.customMessageService = customMessageService;
        this.builtInMessageTypes = ['text', 'file', 'map', 'quote'];
        this._reply = false;
    }
    getInitials() {
        if (this.sender) {
            const names = this.sender.split(' ');
            return names
                .map((n) => n.charAt(0))
                .splice(0, 2)
                .join('')
                .toUpperCase();
        }
        return '';
    }
    _isBuiltInMessageType() {
        // Unset type defaults to "text" type
        return this.type == null || this.builtInMessageTypes.includes(this.type);
    }
    _getTemplate() {
        const customMessage = this.getCustomMessage(this.type);
        return customMessage.templateRef;
    }
    _getTemplateContext() {
        return { $implicit: this.customMessageData, isReply: this.reply };
    }
    _areDefaultStylesEnabled() {
        const customMessageDirective = this.getCustomMessage(this.type);
        return !customMessageDirective.noStyles;
    }
    getCustomMessage(type) {
        const customMessageDirective = this.customMessageService.getInstance(type);
        if (!customMessageDirective) {
            throw new Error(`nb-chat: Can't find template for custom type '${type}'. ` +
                `Make sure you provide it in the chat component with *nbCustomMessage='${type}'.`);
        }
        return customMessageDirective;
    }
}
NbChatMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbChatMessageComponent, deps: [{ token: i1.DomSanitizer }, { token: i2.NbChatCustomMessageService }], target: i0.ɵɵFactoryTarget.Component });
NbChatMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbChatMessageComponent, selector: "nb-chat-message", inputs: { reply: "reply", message: "message", sender: "sender", date: "date", dateFormat: "dateFormat", files: "files", quote: "quote", latitude: "latitude", longitude: "longitude", avatar: "avatar", type: "type", customMessageData: "customMessageData" }, host: { properties: { "@flyInOut": "this.flyInOut", "class.not-reply": "this.notReply", "class.reply": "this.reply" } }, ngImport: i0, template: `
    <nb-chat-avatar *ngIf="notReply" [initials]="getInitials()" [avatarStyle]="avatarStyle"> </nb-chat-avatar>

    <div class="message">
      <ng-container [ngSwitch]="type" *ngIf="_isBuiltInMessageType(); else customTemplate">
        <nb-chat-message-file
          *ngSwitchCase="'file'"
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
          [files]="files"
        >
        </nb-chat-message-file>

        <nb-chat-message-quote
          *ngSwitchCase="'quote'"
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
          [quote]="quote"
        >
        </nb-chat-message-quote>

        <nb-chat-message-map
          *ngSwitchCase="'map'"
          [sender]="sender"
          [date]="date"
          [message]="message"
          [latitude]="latitude"
          [longitude]="longitude"
        >
        </nb-chat-message-map>

        <nb-chat-message-text
          *ngSwitchDefault
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
        >
        </nb-chat-message-text>
      </ng-container>
    </div>

    <ng-template #customTemplate>
      <nb-chat-message-text [sender]="sender" [date]="date" [dateFormat]="dateFormat" [message]="message">
      </nb-chat-message-text>
      <div
        [class.nb-custom-message]="_areDefaultStylesEnabled()"
        [class.nb-custom-message-no-space]="_addNoSpaceClass"
        [class.nb-custom-message-reply]="_addReplyClass"
        [class.nb-custom-message-not-reply]="_addNotReplyClass"
        [class.nb-custom-message-full-width]="!_areDefaultStylesEnabled()"
      >
        <ng-container [ngTemplateOutlet]="_getTemplate()" [ngTemplateOutletContext]="_getTemplateContext()">
        </ng-container>
      </div>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i4.NbChatMessageTextComponent, selector: "nb-chat-message-text", inputs: ["sender", "message", "date", "dateFormat"] }, { kind: "component", type: i5.NbChatMessageFileComponent, selector: "nb-chat-message-file", inputs: ["message", "sender", "date", "dateFormat", "files"] }, { kind: "component", type: i6.NbChatMessageQuoteComponent, selector: "nb-chat-message-quote", inputs: ["message", "sender", "date", "dateFormat", "quote"] }, { kind: "component", type: i7.NbChatMessageMapComponent, selector: "nb-chat-message-map", inputs: ["message", "sender", "date", "dateFormat", "latitude", "longitude"] }, { kind: "component", type: i8.NbChatAvatarComponent, selector: "nb-chat-avatar", inputs: ["initials", "avatarStyle"] }], animations: [
        trigger('flyInOut', [
            state('in', style({ transform: 'translateX(0)' })),
            transition('void => *', [style({ transform: 'translateX(-100%)' }), animate(80)]),
            transition('* => void', [animate(80, style({ transform: 'translateX(100%)' }))]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbChatMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nb-chat-message',
                    template: `
    <nb-chat-avatar *ngIf="notReply" [initials]="getInitials()" [avatarStyle]="avatarStyle"> </nb-chat-avatar>

    <div class="message">
      <ng-container [ngSwitch]="type" *ngIf="_isBuiltInMessageType(); else customTemplate">
        <nb-chat-message-file
          *ngSwitchCase="'file'"
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
          [files]="files"
        >
        </nb-chat-message-file>

        <nb-chat-message-quote
          *ngSwitchCase="'quote'"
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
          [quote]="quote"
        >
        </nb-chat-message-quote>

        <nb-chat-message-map
          *ngSwitchCase="'map'"
          [sender]="sender"
          [date]="date"
          [message]="message"
          [latitude]="latitude"
          [longitude]="longitude"
        >
        </nb-chat-message-map>

        <nb-chat-message-text
          *ngSwitchDefault
          [sender]="sender"
          [date]="date"
          [dateFormat]="dateFormat"
          [message]="message"
        >
        </nb-chat-message-text>
      </ng-container>
    </div>

    <ng-template #customTemplate>
      <nb-chat-message-text [sender]="sender" [date]="date" [dateFormat]="dateFormat" [message]="message">
      </nb-chat-message-text>
      <div
        [class.nb-custom-message]="_areDefaultStylesEnabled()"
        [class.nb-custom-message-no-space]="_addNoSpaceClass"
        [class.nb-custom-message-reply]="_addReplyClass"
        [class.nb-custom-message-not-reply]="_addNotReplyClass"
        [class.nb-custom-message-full-width]="!_areDefaultStylesEnabled()"
      >
        <ng-container [ngTemplateOutlet]="_getTemplate()" [ngTemplateOutletContext]="_getTemplateContext()">
        </ng-container>
      </div>
    </ng-template>
  `,
                    animations: [
                        trigger('flyInOut', [
                            state('in', style({ transform: 'translateX(0)' })),
                            transition('void => *', [style({ transform: 'translateX(-100%)' }), animate(80)]),
                            transition('* => void', [animate(80, style({ transform: 'translateX(100%)' }))]),
                        ]),
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i2.NbChatCustomMessageService }]; }, propDecorators: { flyInOut: [{
                type: HostBinding,
                args: ['@flyInOut']
            }], notReply: [{
                type: HostBinding,
                args: ['class.not-reply']
            }], reply: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.reply']
            }], message: [{
                type: Input
            }], sender: [{
                type: Input
            }], date: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], files: [{
                type: Input
            }], quote: [{
                type: Input
            }], latitude: [{
                type: Input
            }], longitude: [{
                type: Input
            }], avatar: [{
                type: Input
            }], type: [{
                type: Input
            }], customMessageData: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,