import { ContentChildren, Directive, ElementRef, HostBinding, Input, } from '@angular/core';
import { convertToBoolProperty } from '../helpers';
import { NbIconComponent } from '../icon/icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/status.service";
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class NbButton {
    /**
     * Sets `filled` appearance
     */
    get filled() {
        return this.appearance === 'filled';
    }
    set filled(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'filled';
        }
    }
    /**
     * Sets `outline` appearance
     */
    get outline() {
        return this.appearance === 'outline';
    }
    set outline(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'outline';
        }
    }
    /**
     * Sets `ghost` appearance
     */
    get ghost() {
        return this.appearance === 'ghost';
    }
    set ghost(value) {
        if (convertToBoolProperty(value)) {
            this.appearance = 'ghost';
        }
    }
    /**
     * If set element will fill its container
     */
    get fullWidth() {
        return this._fullWidth;
    }
    set fullWidth(value) {
        this._fullWidth = convertToBoolProperty(value);
    }
    /**
     * Disables the button
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (this.disabled !== convertToBoolProperty(value)) {
            this._disabled = !this.disabled;
            this.renderer.setProperty(this.hostElement.nativeElement, 'disabled', this.disabled);
        }
    }
    // issue #794
    get tabbable() {
        if (this.disabled) {
            return '-1';
        }
        if (this.tabIndex == null) {
            return '0';
        }
        return this.tabIndex.toString();
    }
    get tiny() {
        return this.size === 'tiny';
    }
    get small() {
        return this.size === 'small';
    }
    get medium() {
        return this.size === 'medium';
    }
    get large() {
        return this.size === 'large';
    }
    get giant() {
        return this.size === 'giant';
    }
    get rectangle() {
        return this.shape === 'rectangle';
    }
    get round() {
        return this.shape === 'round';
    }
    get semiRound() {
        return this.shape === 'semi-round';
    }
    get additionalClasses() {
        if (this.statusService.isCustomStatus(this.status)) {
            return [this.statusService.getStatusClass(this.status)];
        }
        return [];
    }
    constructor(renderer, hostElement, cd, zone, statusService) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.cd = cd;
        this.zone = zone;
        this.statusService = statusService;
        /**
         * Button size, available sizes:
         * `tiny`, `small`, `medium`, `large`, `giant`
         */
        this.size = 'medium';
        /**
         * Button status (adds specific styles):
         * `primary`, `info`, `success`, `warning`, `danger`
         */
        this.status = 'basic';
        /**
         * Button shapes: `rectangle`, `round`, `semi-round`
         */
        this.shape = 'rectangle';
        /**
         * Button appearance: `filled`, `outline`, `ghost`, `hero`
         */
        this.appearance = 'filled';
        this._fullWidth = false;
        this._disabled = false;
        this.iconLeft = false;
        this.iconRight = false;
    }
    ngAfterContentChecked() {
        const firstNode = this.nodes[0];
        const lastNode = this.nodes[this.nodes.length - 1];
        this.iconLeft = this.isIconExist(firstNode);
        this.iconRight = this.isIconExist(lastNode);
    }
    ngAfterViewInit() {
        // TODO: #2254
        this.zone.runOutsideAngular(() => setTimeout(() => {
            this.renderer.addClass(this.hostElement.nativeElement, 'nb-transition');
        }));
    }
    /**
     * @docs-private
     **/
    updateProperties(config) {
        let isPropertyChanged = false;
        for (const key in config) {
            if (config.hasOwnProperty(key) && this[key] !== config[key]) {
                this[key] = config[key];
                isPropertyChanged = true;
            }
        }
        if (isPropertyChanged) {
            this.cd.markForCheck();
        }
    }
    get iconElement() {
        const el = this.hostElement.nativeElement;
        return el.querySelector('nb-icon');
    }
    get nodes() {
        return this.cd.rootNodes.filter((child) => child.nodeType !== Node.COMMENT_NODE);
    }
    isIconExist(node) {
        return this.icons.some((item) => item.nativeElement === node);
    }
}
NbButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbButton, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.NbStatusService }], target: i0.ɵɵFactoryTarget.Directive });
NbButton.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: NbButton, inputs: { size: "size", status: "status", shape: "shape", appearance: "appearance", filled: "filled", outline: "outline", ghost: "ghost", fullWidth: "fullWidth", disabled: "disabled", tabIndex: "tabIndex" }, host: { properties: { "class.appearance-filled": "this.filled", "class.appearance-outline": "this.outline", "class.appearance-ghost": "this.ghost", "class.full-width": "this.fullWidth", "attr.aria-disabled": "this.disabled", "class.btn-disabled": "this.disabled", "attr.tabindex": "this.tabbable", "class.size-tiny": "this.tiny", "class.size-small": "this.small", "class.size-medium": "this.medium", "class.size-large": "this.large", "class.size-giant": "this.giant", "class.shape-rectangle": "this.rectangle", "class.shape-round": "this.round", "class.shape-semi-round": "this.semiRound", "class.icon-start": "this.iconLeft", "class.icon-end": "this.iconRight", "class": "this.additionalClasses" } }, queries: [{ propertyName: "icons", predicate: NbIconComponent, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbButton, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.NbStatusService }]; }, propDecorators: { size: [{
                type: Input
            }], status: [{
                type: Input
            }], shape: [{
                type: Input
            }], appearance: [{
                type: Input
            }], filled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-filled']
            }], outline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-outline']
            }], ghost: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.appearance-ghost']
            }], fullWidth: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.full-width']
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: HostBinding,
                args: ['class.btn-disabled']
            }], tabIndex: [{
                type: Input
            }], tabbable: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], tiny: [{
                type: HostBinding,
                args: ['class.size-tiny']
            }], small: [{
                type: HostBinding,
                args: ['class.size-small']
            }], medium: [{
                type: HostBinding,
                args: ['class.size-medium']
            }], large: [{
                type: HostBinding,
                args: ['class.size-large']
            }], giant: [{
                type: HostBinding,
                args: ['class.size-giant']
            }], rectangle: [{
                type: HostBinding,
                args: ['class.shape-rectangle']
            }], round: [{
                type: HostBinding,
                args: ['class.shape-round']
            }], semiRound: [{
                type: HostBinding,
                args: ['class.shape-semi-round']
            }], iconLeft: [{
                type: HostBinding,
                args: ['class.icon-start']
            }], iconRight: [{
                type: HostBinding,
                args: ['class.icon-end']
            }], additionalClasses: [{
                type: HostBinding,
                args: ['class']
            }], icons: [{
                type: ContentChildren,
                args: [NbIconComponent, { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,