import { Component, HostListener, Inject, Input } from '@angular/core';
import { Subject, timer } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { NbCdkFooterRow, NbCdkHeaderRow, NbCdkRow } from '../cdk/table/type-mappings';
import { NbFooterRowComponent, NbHeaderRowComponent, NbRowComponent } from '../cdk/table/row';
import { NB_TREE_GRID } from './tree-grid-injection-tokens';
import * as i0 from "@angular/core";
import * as i1 from "../cdk/table/row";
export const NB_ROW_DOUBLE_CLICK_DELAY = 200;
/**
 * Cells container. Adds the right class and role.
 */
export class NbTreeGridRowComponent extends NbRowComponent {
    toggleIfEnabledNode() {
        if (!this.clickToToggle) {
            return;
        }
        timer(NB_ROW_DOUBLE_CLICK_DELAY)
            .pipe(take(1), takeUntil(this.doubleClick$))
            .subscribe(() => this.tree.toggleRow(this));
    }
    toggleIfEnabledNodeDeep() {
        if (!this.clickToToggle) {
            return;
        }
        this.doubleClick$.next();
        this.tree.toggleRow(this, { deep: true });
    }
    constructor(tree, elementRef) {
        super();
        this.elementRef = elementRef;
        this.doubleClick$ = new Subject();
        /**
         * Time to wait for second click to expand row deeply.
         * 200ms by default.
         */
        this.doubleClickDelay = NB_ROW_DOUBLE_CLICK_DELAY;
        /**
         * Toggle row on click. Enabled by default.
         */
        this.clickToToggle = true;
        this.tree = tree;
    }
    ngOnDestroy() {
        this.doubleClick$.complete();
    }
}
NbTreeGridRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridRowComponent, deps: [{ token: NB_TREE_GRID }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NbTreeGridRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbTreeGridRowComponent, selector: "tr[nbTreeGridRow]", inputs: { doubleClickDelay: "doubleClickDelay", clickToToggle: "clickToToggle" }, host: { attributes: { "role": "row" }, listeners: { "click": "toggleIfEnabledNode()", "dblclick": "toggleIfEnabledNodeDeep()" }, classAttribute: "nb-tree-grid-row" }, providers: [{ provide: NbCdkRow, useExisting: NbTreeGridRowComponent }], usesInheritance: true, ngImport: i0, template: `<ng-container nbCellOutlet></ng-container>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NbCellOutletDirective, selector: "[nbCellOutlet]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[nbTreeGridRow]',
                    template: `<ng-container nbCellOutlet></ng-container>`,
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        class: 'nb-tree-grid-row',
                        role: 'row',
                    },
                    providers: [{ provide: NbCdkRow, useExisting: NbTreeGridRowComponent }],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_TREE_GRID]
                }] }, { type: i0.ElementRef }]; }, propDecorators: { doubleClickDelay: [{
                type: Input
            }], clickToToggle: [{
                type: Input
            }], toggleIfEnabledNode: [{
                type: HostListener,
                args: ['click']
            }], toggleIfEnabledNodeDeep: [{
                type: HostListener,
                args: ['dblclick']
            }] } });
export class NbTreeGridHeaderRowComponent extends NbHeaderRowComponent {
}
NbTreeGridHeaderRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridHeaderRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
NbTreeGridHeaderRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbTreeGridHeaderRowComponent, selector: "tr[nbTreeGridHeaderRow]", host: { attributes: { "role": "row" }, classAttribute: "nb-tree-grid-header-row" }, providers: [{ provide: NbCdkHeaderRow, useExisting: NbTreeGridHeaderRowComponent }], usesInheritance: true, ngImport: i0, template: ` <ng-container nbCellOutlet></ng-container>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NbCellOutletDirective, selector: "[nbCellOutlet]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridHeaderRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[nbTreeGridHeaderRow]',
                    template: ` <ng-container nbCellOutlet></ng-container>`,
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        class: 'nb-tree-grid-header-row',
                        role: 'row',
                    },
                    providers: [{ provide: NbCdkHeaderRow, useExisting: NbTreeGridHeaderRowComponent }],
                }]
        }] });
export class NbTreeGridFooterRowComponent extends NbFooterRowComponent {
}
NbTreeGridFooterRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridFooterRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
NbTreeGridFooterRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbTreeGridFooterRowComponent, selector: "tr[nbTreeGridFooterRow]", host: { attributes: { "role": "row" }, classAttribute: "nb-tree-grid-footer-row" }, providers: [{ provide: NbCdkFooterRow, useExisting: NbTreeGridFooterRowComponent }], usesInheritance: true, ngImport: i0, template: ` <ng-container nbCellOutlet></ng-container>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NbCellOutletDirective, selector: "[nbCellOutlet]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTreeGridFooterRowComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'tr[nbTreeGridFooterRow]',
                    template: ` <ng-container nbCellOutlet></ng-container>`,
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        class: 'nb-tree-grid-footer-row',
                        role: 'row',
                    },
                    providers: [{ provide: NbCdkFooterRow, useExisting: NbTreeGridFooterRowComponent }],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL3RoZW1lL2NvbXBvbmVudHMvdHJlZS1ncmlkL3RyZWUtZ3JpZC1yb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFOUYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFFNUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQVcsR0FBRyxDQUFDO0FBRXJEOztHQUVHO0FBWUgsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGNBQWM7SUFnQnhELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixPQUFPO1NBQ1I7UUFFRCxLQUFLLENBQUMseUJBQXlCLENBQUM7YUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzNDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFHRCx1QkFBdUI7UUFDckIs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IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbmplY3QsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBOYkNka0Zvb3RlclJvdywgTmJDZGtIZWFkZXJSb3csIE5iQ2RrUm93IH0gZnJvbSAnLi4vY2RrL3RhYmxlL3R5cGUtbWFwcGluZ3MnO1xuaW1wb3J0IHsgTmJGb290ZXJSb3dDb21wb25lbnQsIE5iSGVhZGVyUm93Q29tcG9uZW50LCBOYlJvd0NvbXBvbmVudCB9IGZyb20gJy4uL2Nkay90YWJsZS9yb3cnO1xuaW1wb3J0IHsgTmJUcmVlR3JpZENvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOQl9UUkVFX0dSSUQgfSBmcm9tICcuL3RyZWUtZ3JpZC1pbmplY3Rpb24tdG9rZW5zJztcblxuZXhwb3J0IGNvbnN0IE5CX1JPV19ET1VCTEVfQ0xJQ0tfREVMQVk6IG51bWJlciA9IDIwMDtcblxuLyoqXG4gKiBDZWxscyBjb250YWluZXIuIEFkZHMgdGhlIHJpZ2h0IGNsYXNzIGFuZCByb2xlLlxuICovXG5AQ29tcG9uZW50KHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0cltuYlRyZWVHcmlkUm93XScsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciBuYkNlbGxPdXRsZXQ+PC9uZy1jb250YWluZXI+YCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ25iLXRyZWUtZ3JpZC1yb3cnLFxuICAgIHJvbGU6ICdyb3cnLFxuICB9LFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5iQ2RrUm93LCB1c2VFeGlzdGluZzogTmJUcmVlR3JpZFJvd0NvbXBvbmVudCB9XSxcbn0pXG5leHBvcnQgY2xhc3MgTmJUcmVlR3JpZFJvd0NvbXBvbmVudCBleHRlbmRzIE5iUm93Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBkb3VibGVDbGljayQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IHRyZWU6IE5iVHJlZUdyaWRDb21wb25lbnQ8YW55PjtcblxuICAvKipcbiAgICogVGltZSB0byB3YWl0IGZvciBzZWNvbmQgY2xpY2sgdG8gZXhwYW5kIHJvdyBkZWVwbHkuXG4gICAqIDIwMG1zIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBASW5wdXQoKSBkb3VibGVDbGlja0RlbGF5OiBudW1iZXIgPSBOQl9ST1dfRE9VQkxFX0NMSUNLX0RFTEFZO1xuXG4gIC8qKlxuICAgKiBUb2dnbGUgcm93IG9uIGNsaWNrLiBFbmFibGVkIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBASW5wdXQoKSBjbGlja1RvVG9nZ2xlOiBib29sZWFuID0gdHJ1ZTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHRvZ2dsZUlmRW5hYmxlZE5vZGUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNsaWNrVG9Ub2dnbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aW1lcihOQl9ST1dfRE9VQkxFX0NMSUNLX0RFTEFZKVxuICAgICAgLnBpcGUodGFrZSgxKSwgdGFrZVVudGlsKHRoaXMuZG91YmxlQ2xpY2skKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy50cmVlLnRvZ2dsZVJvdyh0aGlzKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkYmxjbGljaycpXG4gIHRvZ2dsZUlmRW5hYmxlZE5vZGVEZWVwKCkge1xuICAgIGlmICghdGhpcy5jbGlja1RvVG9nZ2xlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kb3VibGVDbGljayQubmV4dCgpO1xuICAgIHRoaXMudHJlZS50b2dnbGVSb3codGhpcywgeyBkZWVwOiB0cnVlIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChOQl9UUkVFX0dSSUQpIHRyZWUsIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50cmVlID0gdHJlZSBhcyBOYlRyZWVHcmlkQ29tcG9uZW50PGFueT47XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRvdWJsZUNsaWNrJC5jb21wbGV0ZSgpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RyW25iVHJlZUdyaWRIZWFkZXJSb3ddJyxcbiAgdGVtcGxhdGU6IGAgPG5nLWNvbnRhaW5lciBuYkNlbGxPdXRsZXQ+PC9uZy1jb250YWluZXI+YCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ25iLXRyZWUtZ3JpZC1oZWFkZXItcm93JyxcbiAgICByb2xlOiAncm93JyxcbiAgfSxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOYkNka0hlYWRlclJvdywgdXNlRXhpc3Rpbmc6IE5iVHJlZUdyaWRIZWFkZXJSb3dDb21wb25lbnQgfV0sXG59KVxuZXhwb3J0IGNsYXNzIE5iVHJlZUdyaWRIZWFkZXJSb3dDb21wb25lbnQgZXh0ZW5kcyBOYkhlYWRlclJvd0NvbXBvbmVudCB7fVxuXG5AQ29tcG9uZW50KHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0cltuYlRyZWVHcmlkRm9vdGVyUm93XScsXG4gIHRlbXBsYXRlOiBgIDxuZy1jb250YWluZXIgbmJDZWxsT3V0bGV0PjwvbmctY29udGFpbmVyPmAsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduYi10cmVlLWdyaWQtZm9vdGVyLXJvdycsXG4gICAgcm9sZTogJ3JvdycsXG4gIH0sXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmJDZGtGb290ZXJSb3csIHVzZUV4aXN0aW5nOiBOYlRyZWVHcmlkRm9vdGVyUm93Q29tcG9uZW50IH1dLFxufSlcbmV4cG9ydCBjbGFzcyBOYlRyZWVHcmlkRm9vdGVyUm93Q29tcG9uZW50IGV4dGVuZHMgTmJGb290ZXJSb3dDb21wb25lbnQge31cbiJdfQ==