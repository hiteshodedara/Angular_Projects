import { Attribute, Inject, NgModule, Component, Optional, SkipSelf, } from '@angular/core';
import { _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, CdkTable, CdkTableModule, } from '@angular/cdk/table';
import { _DisposeViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY } from '@angular/cdk/collections';
import { NbBidiModule } from '../bidi/bidi.module';
import { NB_DOCUMENT } from '../../../theme.options';
import { NB_STICKY_POSITIONING_LISTENER } from '../../cdk/table/type-mappings';
import { NbCellDefDirective, NbCellDirective, NbColumnDefDirective, NbFooterCellDefDirective, NbFooterCellDirective, NbHeaderCellDefDirective, NbHeaderCellDirective, } from './cell';
import { NbCellOutletDirective, NbDataRowOutletDirective, NbFooterRowOutletDirective, NbHeaderRowOutletDirective, NbFooterRowComponent, NbFooterRowDefDirective, NbHeaderRowComponent, NbHeaderRowDefDirective, NbRowComponent, NbRowDefDirective, NbNoDataRowOutletDirective, } from './row';
import * as i0 from "@angular/core";
import * as i1 from "../bidi/bidi-service";
import * as i2 from "../platform/platform-service";
import * as i3 from "../adapter/viewport-ruler-adapter";
import * as i4 from "@angular/cdk/table";
export const NB_TABLE_TEMPLATE = `
  <ng-container nbHeaderRowOutlet></ng-container>
  <ng-container nbRowOutlet></ng-container>
  <ng-container nbNoDataRowOutlet></ng-container>
  <ng-container nbFooterRowOutlet></ng-container>
`;
export const NB_VIEW_REPEATER_STRATEGY = _VIEW_REPEATER_STRATEGY;
export const NB_COALESCED_STYLE_SCHEDULER = _COALESCED_STYLE_SCHEDULER;
export const NB_TABLE_PROVIDERS = [
    { provide: NB_VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },
    { provide: NB_COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },
];
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class NbTable extends CdkTable {
    constructor(differs, changeDetectorRef, elementRef, role, dir, document, platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, _stickyPositioningListener) {
        super(differs, changeDetectorRef, elementRef, role, dir, document, platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, _stickyPositioningListener);
        this._viewRepeater = _viewRepeater;
        this._coalescedStyleScheduler = _coalescedStyleScheduler;
        this._stickyPositioningListener = _stickyPositioningListener;
    }
}
NbTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.NbDirectionality }, { token: NB_DOCUMENT }, { token: i2.NbPlatform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.NbViewportRulerAdapter }, { token: NB_STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
NbTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbTable, selector: "nb-table-not-implemented", providers: NB_TABLE_PROVIDERS, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTable, decorators: [{
            type: Component,
            args: [{
                    selector: 'nb-table-not-implemented',
                    template: ``,
                    providers: NB_TABLE_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['role']
                }] }, { type: i1.NbDirectionality }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_DOCUMENT]
                }] }, { type: i2.NbPlatform }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [_VIEW_REPEATER_STRATEGY]
                }] }, { type: i4._CoalescedStyleScheduler, decorators: [{
                    type: Inject,
                    args: [_COALESCED_STYLE_SCHEDULER]
                }] }, { type: i3.NbViewportRulerAdapter }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [NB_STICKY_POSITIONING_LISTENER]
                }] }]; } });
const COMPONENTS = [
    NbTable,
    // Template defs
    NbHeaderCellDefDirective,
    NbHeaderRowDefDirective,
    NbColumnDefDirective,
    NbCellDefDirective,
    NbRowDefDirective,
    NbFooterCellDefDirective,
    NbFooterRowDefDirective,
    // Outlets
    NbDataRowOutletDirective,
    NbHeaderRowOutletDirective,
    NbFooterRowOutletDirective,
    NbNoDataRowOutletDirective,
    NbCellOutletDirective,
    // Cell directives
    NbHeaderCellDirective,
    NbCellDirective,
    NbFooterCellDirective,
    // Row directives
    NbHeaderRowComponent,
    NbRowComponent,
    NbFooterRowComponent,
];
export class NbTableModule extends CdkTableModule {
}
NbTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTableModule, deps: null, target: i0.ɵɵFactoryTarget.NgModule });
NbTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: NbTableModule, declarations: [NbTable, 
        // Template defs
        NbHeaderCellDefDirective,
        NbHeaderRowDefDirective,
        NbColumnDefDirective,
        NbCellDefDirective,
        NbRowDefDirective,
        NbFooterCellDefDirective,
        NbFooterRowDefDirective,
        // Outlets
        NbDataRowOutletDirective,
        NbHeaderRowOutletDirective,
        NbFooterRowOutletDirective,
        NbNoDataRowOutletDirective,
        NbCellOutletDirective,
        // Cell directives
        NbHeaderCellDirective,
        NbCellDirective,
        NbFooterCellDirective,
        // Row directives
        NbHeaderRowComponent,
        NbRowComponent,
        NbFooterRowComponent], imports: [NbBidiModule], exports: [NbTable, 
        // Template defs
        NbHeaderCellDefDirective,
        NbHeaderRowDefDirective,
        NbColumnDefDirective,
        NbCellDefDirective,
        NbRowDefDirective,
        NbFooterCellDefDirective,
        NbFooterRowDefDirective,
        // Outlets
        NbDataRowOutletDirective,
        NbHeaderRowOutletDirective,
        NbFooterRowOutletDirective,
        NbNoDataRowOutletDirective,
        NbCellOutletDirective,
        // Cell directives
        NbHeaderCellDirective,
        NbCellDirective,
        NbFooterCellDirective,
        // Row directives
        NbHeaderRowComponent,
        NbRowComponent,
        NbFooterRowComponent] });
NbTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTableModule, imports: [NbBidiModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NbBidiModule],
                    declarations: [...COMPONENTS],
                    exports: [...COMPONENTS],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,