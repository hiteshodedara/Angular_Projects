/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Component, ElementRef, HostBinding, HostListener, Input, ViewChild, ViewContainerRef, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { convertToBoolProperty } from '../helpers';
import { NB_WINDOW, NB_DOCUMENT } from '../../theme.options';
import * as i0 from "@angular/core";
import * as i1 from "../../services/theme.service";
import * as i2 from "../../services/spinner.service";
import * as i3 from "../../services/direction.service";
import * as i4 from "../../services/scroll.service";
import * as i5 from "../../services/ruler.service";
import * as i6 from "./restore-scroll-top.service";
import * as i7 from "../cdk/adapter/overlay-container-adapter";
/**
 * Layout container component.
 * When using with Nebular Theme System it is required that all child components should be placed inside.
 *
 * Basic example of two column layout with header:
 *
 * @stacked-example(Showcase, layout/layout-showcase.component)
 *
 * Can contain the following components inside:
 *
 * ```html
 * <nb-layout>
 *  <nb-layout-header></nb-layout-header>
 *  <nb-layout-footer></nb-layout-footer>
 *  <nb-layout-column></nb-layout-column>
 *  <nb-sidebar></nb-sidebar>
 * </nb-layout>
 * ```
 * ### Installation
 *
 * Import `NbLayoutModule` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbLayoutModule,
 *   ],
 * })
 * export class AppModule { }
 * ```
 * ### Usage
 * By default the layout fills up the whole view-port.
 * The window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars
 * won't mess with the fixed nb-header.
 *
 * The child components are projected into a flexible layout structure allowing to adjust the layout behavior
 * based on the settings provided.
 *
 * The layout content (columns) becomes centered when the window width is more than
 * the value specified in the theme variable `layout-content-width`.
 *
 * The layout also contains the area on the very top (the first child of the nb-layout), which could be used
 * to dynamically append some components like modals or spinners/loaders
 * so that they are located on top of the elements hierarchy.
 * More details are under the `ThemeService` section.
 *
 * The layout component is also responsible for changing application themes.
 * It listens to the `themeChange` event and change a theme CSS class appended to body.
 * Based on the class appended, specific CSS-theme is applied to the application.
 * More details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)
 *
 * A simple layout with footer:
 *
 * @stacked-example(Layout With Footer, layout/layout-w-footer.component)
 *
 * It is possible to ask the layout to center the columns (notice: we added a `center` attribute
 * to the layout:
 *
 * ```html
 * <nb-layout center>
 *   <nb-layout-header>Awesome Company</nb-layout-header>
 *
 *   <nb-layout-column>
 *     Hello World!
 *   </nb-layout-column>
 *
 *   <nb-layout-footer>Contact us</nb-layout-footer>
 * </nb-layout>
 * ```
 *
 * @styles
 *
 * layout-background-color:
 * layout-text-color:
 * layout-text-font-family:
 * layout-text-font-size:
 * layout-text-font-weight:
 * layout-text-line-height:
 * layout-min-height:
 * layout-content-width:
 * layout-window-mode-min-width:
 * layout-window-mode-background-color:
 * layout-window-mode-padding-top:
 * layout-window-shadow:
 * layout-padding:
 * layout-medium-padding:
 * layout-small-padding:
 * layout-scrollbar-background-color:
 * layout-scrollbar-color:
 * layout-scrollbar-width:
 */
export class NbLayoutComponent {
    /**
     * Defines whether the layout columns will be centered after some width
     * @param {boolean} val
     */
    set center(val) {
        this.centerValue = convertToBoolProperty(val);
    }
    /**
     * Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)
     * becomes centered by width with a margin from the top of the screen, like a floating window.
     * Automatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on
     * window. (TODO: check this)
     * @param {boolean} val
     */
    set windowMode(val) {
        this.windowModeValue = convertToBoolProperty(val);
        this.withScroll = this.windowModeValue;
    }
    /**
     * Defines whether to move the scrollbars to layout or leave it at the body level.
     * Automatically set to true when `windowMode` is enabled.
     * @param {boolean} val
     */
    set withScroll(val) {
        this.withScrollValue = convertToBoolProperty(val);
        // TODO: is this the best way of doing it? as we don't have access to body from theme styles
        // TODO: add e2e test
        const body = this.document.getElementsByTagName('body')[0];
        if (this.withScrollValue) {
            this.renderer.setStyle(body, 'overflow', 'hidden');
        }
        else {
            this.renderer.setStyle(body, 'overflow', 'initial');
        }
    }
    /**
     * Restores scroll to the top of the page after navigation
     * @param {boolean} val
     */
    set restoreScrollTop(val) {
        this.restoreScrollTopValue = convertToBoolProperty(val);
    }
    constructor(themeService, spinnerService, elementRef, renderer, window, document, platformId, layoutDirectionService, scrollService, rulerService, scrollTop, overlayContainer) {
        this.themeService = themeService;
        this.spinnerService = spinnerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.window = window;
        this.document = document;
        this.platformId = platformId;
        this.layoutDirectionService = layoutDirectionService;
        this.scrollService = scrollService;
        this.rulerService = rulerService;
        this.scrollTop = scrollTop;
        this.overlayContainer = overlayContainer;
        this.scrollBlockClass = 'nb-global-scrollblock';
        this.isScrollBlocked = false;
        this.centerValue = false;
        this.restoreScrollTopValue = true;
        this.windowModeValue = false;
        this.withScrollValue = false;
        this.withSubheader = false;
        this.afterViewInit$ = new BehaviorSubject(null);
        this.destroy$ = new Subject();
        this.registerAsOverlayContainer();
        this.themeService
            .onThemeChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((theme) => {
            const body = this.document.getElementsByTagName('body')[0];
            if (theme.previous) {
                this.renderer.removeClass(body, `nb-theme-${theme.previous}`);
            }
            this.renderer.addClass(body, `nb-theme-${theme.name}`);
        });
        this.themeService
            .onAppendLayoutClass()
            .pipe(takeUntil(this.destroy$))
            .subscribe((className) => {
            this.renderer.addClass(this.elementRef.nativeElement, className);
        });
        this.themeService
            .onRemoveLayoutClass()
            .pipe(takeUntil(this.destroy$))
            .subscribe((className) => {
            this.renderer.removeClass(this.elementRef.nativeElement, className);
        });
        this.spinnerService.registerLoader(new Promise((resolve) => {
            this.afterViewInit$.pipe(takeUntil(this.destroy$)).subscribe((_) => resolve());
        }));
        this.spinnerService.load();
        this.rulerService
            .onGetDimensions()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ listener }) => {
            listener.next(this.getDimensions());
            listener.complete();
        });
        this.scrollService
            .onGetPosition()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ listener }) => {
            listener.next(this.getScrollPosition());
            listener.complete();
        });
        this.scrollTop
            .shouldRestore()
            .pipe(filter(() => this.restoreScrollTopValue), takeUntil(this.destroy$))
            .subscribe(() => {
            this.scroll(0, 0);
        });
        this.scrollService
            .onScrollableChange()
            .pipe(filter(() => this.withScrollValue), takeUntil(this.destroy$))
            .subscribe((scrollable) => {
            /**
             * In case when Nebular Layout custom scroll `withScroll` mode is enabled
             * we need to disable default CDK scroll blocker (@link NbBlockScrollStrategyAdapter) on HTML element
             * so that it won't add additional positioning.
             */
            if (scrollable) {
                this.enableScroll();
            }
            else {
                this.blockScroll();
            }
        });
        if (isPlatformBrowser(this.platformId)) {
            // trigger first time so that after the change we have the initial value
            this.themeService.changeWindowWidth(this.window.innerWidth);
        }
    }
    ngAfterViewInit() {
        this.layoutDirectionService
            .onDirectionChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((direction) => (this.document.dir = direction));
        this.scrollService
            .onManualScroll()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ x, y }) => this.scroll(x, y));
        this.afterViewInit$.next(true);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.unregisterAsOverlayContainer();
    }
    onScroll($event) {
        this.scrollService.fireScrollChange($event);
    }
    onResize(event) {
        this.themeService.changeWindowWidth(event.target.innerWidth);
    }
    /**
     * Returns scroll and client height/width
     *
     * Depending on the current scroll mode (`withScroll=true`) returns sizes from the body element
     * or from the `.scrollable-container`
     * @returns {NbLayoutDimensions}
     */
    getDimensions() {
        let clientWidth, clientHeight, scrollWidth, scrollHeight = 0;
        if (this.withScrollValue) {
            const container = this.scrollableContainerRef.nativeElement;
            clientWidth = container.clientWidth;
            clientHeight = container.clientHeight;
            scrollWidth = container.scrollWidth;
            scrollHeight = container.scrollHeight;
        }
        else {
            const { documentElement, body } = this.document;
            clientWidth = documentElement.clientWidth || body.clientWidth;
            clientHeight = documentElement.clientHeight || body.clientHeight;
            scrollWidth = documentElement.scrollWidth || body.scrollWidth;
            scrollHeight = documentElement.scrollHeight || body.scrollHeight;
        }
        return {
            clientWidth,
            clientHeight,
            scrollWidth,
            scrollHeight,
        };
    }
    /**
     * Returns scroll position of current scroll container.
     *
     * If `withScroll` = true, returns scroll position of the `.scrollable-container` element,
     * otherwise - of the scrollable element of the window (which may be different depending of a browser)
     *
     * @returns {NbScrollPosition}
     */
    getScrollPosition() {
        if (!isPlatformBrowser(this.platformId)) {
            return { x: 0, y: 0 };
        }
        if (this.withScrollValue) {
            const container = this.scrollableContainerRef.nativeElement;
            return { x: container.scrollLeft, y: container.scrollTop };
        }
        const documentRect = this.document.documentElement.getBoundingClientRect();
        const x = -documentRect.left ||
            this.document.body.scrollLeft ||
            this.window.scrollX ||
            this.document.documentElement.scrollLeft ||
            0;
        const y = -documentRect.top ||
            this.document.body.scrollTop ||
            this.window.scrollY ||
            this.document.documentElement.scrollTop ||
            0;
        return { x, y };
    }
    registerAsOverlayContainer() {
        if (this.overlayContainer.setContainer) {
            this.overlayContainer.setContainer(this.elementRef.nativeElement);
        }
    }
    unregisterAsOverlayContainer() {
        if (this.overlayContainer.clearContainer) {
            this.overlayContainer.clearContainer();
        }
    }
    scroll(x = null, y = null) {
        const { x: currentX, y: currentY } = this.getScrollPosition();
        x = x == null ? currentX : x;
        y = y == null ? currentY : y;
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (this.withScrollValue) {
            const scrollable = this.scrollableContainerRef.nativeElement;
            if (scrollable.scrollTo) {
                scrollable.scrollTo(x, y);
            }
            else {
                scrollable.scrollLeft = x;
                scrollable.scrollTop = y;
            }
        }
        else {
            this.window.scrollTo(x, y);
        }
    }
    // TODO: Extract into block scroll strategy
    blockScroll() {
        if (this.isScrollBlocked) {
            return;
        }
        this.isScrollBlocked = true;
        this.renderer.addClass(this.document.documentElement, this.scrollBlockClass);
        const scrollableContainerElement = this.scrollableContainerRef.nativeElement;
        const layoutElement = this.layoutContainerRef.nativeElement;
        const layoutWithScrollWidth = layoutElement.clientWidth;
        this.scrollableContainerOverflowOldValue = scrollableContainerElement.style.overflow;
        scrollableContainerElement.style.overflow = 'hidden';
        const layoutWithoutScrollWidth = layoutElement.clientWidth;
        const scrollWidth = layoutWithoutScrollWidth - layoutWithScrollWidth;
        if (!scrollWidth) {
            return;
        }
        this.layoutPaddingOldValue = {
            left: layoutElement.style.paddingLeft,
            right: layoutElement.style.paddingRight,
        };
        if (this.layoutDirectionService.isLtr()) {
            layoutElement.style.paddingRight = `${scrollWidth}px`;
        }
        else {
            layoutElement.style.paddingLeft = `${scrollWidth}px`;
        }
    }
    enableScroll() {
        if (this.isScrollBlocked) {
            this.isScrollBlocked = false;
            this.renderer.removeClass(this.document.documentElement, this.scrollBlockClass);
            this.scrollableContainerRef.nativeElement.style.overflow = this.scrollableContainerOverflowOldValue;
            if (this.layoutPaddingOldValue) {
                const layoutElement = this.layoutContainerRef.nativeElement;
                layoutElement.style.paddingLeft = this.layoutPaddingOldValue.left;
                layoutElement.style.paddingRight = this.layoutPaddingOldValue.right;
                this.layoutPaddingOldValue = null;
            }
        }
    }
}
NbLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutComponent, deps: [{ token: i1.NbThemeService }, { token: i2.NbSpinnerService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NB_WINDOW }, { token: NB_DOCUMENT }, { token: PLATFORM_ID }, { token: i3.NbLayoutDirectionService }, { token: i4.NbLayoutScrollService }, { token: i5.NbLayoutRulerService }, { token: i6.NbRestoreScrollTopHelper }, { token: i7.NbOverlayContainerAdapter }], target: i0.ɵɵFactoryTarget.Component });
NbLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbLayoutComponent, selector: "nb-layout", inputs: { center: "center", windowMode: "windowMode", withScroll: "withScroll", restoreScrollTop: "restoreScrollTop" }, host: { listeners: { "window:scroll": "onScroll($event)", "window:resize": "onResize($event)" }, properties: { "class.window-mode": "this.windowModeValue", "class.with-scroll": "this.withScrollValue", "class.with-subheader": "this.withSubheader" } }, viewQueries: [{ propertyName: "veryTopRef", first: true, predicate: ["layoutTopDynamicArea"], descendants: true, read: ViewContainerRef }, { propertyName: "scrollableContainerRef", first: true, predicate: ["scrollableContainer"], descendants: true, read: ElementRef, static: true }, { propertyName: "layoutContainerRef", first: true, predicate: ["layoutContainer"], descendants: true, read: ElementRef }], ngImport: i0, template: `
    <div class="scrollable-container" #scrollableContainer (scroll)="onScroll($event)">
      <div class="layout" #layoutContainer>
        <ng-content select="nb-layout-header:not([subheader])"></ng-content>
        <div class="layout-container">
          <ng-content select="nb-sidebar"></ng-content>
          <div class="content" [class.center]="centerValue">
            <ng-content select="nb-layout-header[subheader]"></ng-content>
            <div class="columns">
              <ng-content select="nb-layout-column"></ng-content>
            </div>
            <ng-content select="nb-layout-footer"></ng-content>
          </div>
        </div>
      </div>
    </div>
  `, isInline: true, styles: ["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{-webkit-font-smoothing:antialiased}[dir=ltr] :host{text-align:left}[dir=rtl] :host{text-align:right}:host .layout{display:flex;flex-direction:column}:host ::ng-deep nb-layout-header{display:block}:host ::ng-deep nb-layout-header nav{align-items:center;justify-content:flex-start;display:flex}:host ::ng-deep nb-layout-header.fixed{position:fixed;top:0;left:0;right:0;z-index:1040}:host .layout-container{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.left{order:0}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.left{order:2}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.right{order:2}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.right{order:0}:host .layout-container ::ng-deep nb-sidebar.end{order:2}:host .layout-container ::ng-deep nb-sidebar .fixed{position:fixed;width:100%;overflow-y:auto;height:100%}:host .layout-container .content{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:column;min-width:0}:host .layout-container .content.center{max-width:100%;position:relative;margin-left:auto;margin-right:auto}:host .layout-container .content .columns{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row;width:100%}:host .layout-container .content .columns ::ng-deep nb-layout-column{order:1;flex:1 0;min-width:0}[dir=ltr] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:0}[dir=rtl] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:2}:host .layout-container .content .columns ::ng-deep nb-layout-column.start{order:0}:host .layout-container .content ::ng-deep nb-layout-footer{display:block;margin-top:auto}:host .layout-container .content ::ng-deep nb-layout-footer nav{justify-content:center;display:flex}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nb-layout', template: `
    <div class="scrollable-container" #scrollableContainer (scroll)="onScroll($event)">
      <div class="layout" #layoutContainer>
        <ng-content select="nb-layout-header:not([subheader])"></ng-content>
        <div class="layout-container">
          <ng-content select="nb-sidebar"></ng-content>
          <div class="content" [class.center]="centerValue">
            <ng-content select="nb-layout-header[subheader]"></ng-content>
            <div class="columns">
              <ng-content select="nb-layout-column"></ng-content>
            </div>
            <ng-content select="nb-layout-footer"></ng-content>
          </div>
        </div>
      </div>
    </div>
  `, styles: ["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{-webkit-font-smoothing:antialiased}[dir=ltr] :host{text-align:left}[dir=rtl] :host{text-align:right}:host .layout{display:flex;flex-direction:column}:host ::ng-deep nb-layout-header{display:block}:host ::ng-deep nb-layout-header nav{align-items:center;justify-content:flex-start;display:flex}:host ::ng-deep nb-layout-header.fixed{position:fixed;top:0;left:0;right:0;z-index:1040}:host .layout-container{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.left{order:0}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.left{order:2}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.right{order:2}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.right{order:0}:host .layout-container ::ng-deep nb-sidebar.end{order:2}:host .layout-container ::ng-deep nb-sidebar .fixed{position:fixed;width:100%;overflow-y:auto;height:100%}:host .layout-container .content{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:column;min-width:0}:host .layout-container .content.center{max-width:100%;position:relative;margin-left:auto;margin-right:auto}:host .layout-container .content .columns{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row;width:100%}:host .layout-container .content .columns ::ng-deep nb-layout-column{order:1;flex:1 0;min-width:0}[dir=ltr] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:0}[dir=rtl] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:2}:host .layout-container .content .columns ::ng-deep nb-layout-column.start{order:0}:host .layout-container .content ::ng-deep nb-layout-footer{display:block;margin-top:auto}:host .layout-container .content ::ng-deep nb-layout-footer nav{justify-content:center;display:flex}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NbThemeService }, { type: i2.NbSpinnerService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_DOCUMENT]
                }] }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i3.NbLayoutDirectionService }, { type: i4.NbLayoutScrollService }, { type: i5.NbLayoutRulerService }, { type: i6.NbRestoreScrollTopHelper }, { type: i7.NbOverlayContainerAdapter }]; }, propDecorators: { windowModeValue: [{
                type: HostBinding,
                args: ['class.window-mode']
            }], withScrollValue: [{
                type: HostBinding,
                args: ['class.with-scroll']
            }], withSubheader: [{
                type: HostBinding,
                args: ['class.with-subheader']
            }], center: [{
                type: Input
            }], windowMode: [{
                type: Input
            }], withScroll: [{
                type: Input
            }], restoreScrollTop: [{
                type: Input
            }], veryTopRef: [{
                type: ViewChild,
                args: ['layoutTopDynamicArea', { read: ViewContainerRef }]
            }], scrollableContainerRef: [{
                type: ViewChild,
                args: ['scrollableContainer', { read: ElementRef, static: true }]
            }], layoutContainerRef: [{
                type: ViewChild,
                args: ['layoutContainer', { read: ElementRef }]
            }], onScroll: [{
                type: HostListener,
                args: ['window:scroll', ['$event']]
            }], onResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }] } });
/**
 * A container component which determines a content position inside of the layout.
 * The layout could contain unlimited columns (not including the sidebars).
 *
 * By default the columns are ordered from the left to the right,
 * but it's also possible to overwrite this behavior by setting a `left` attribute to the column,
 * moving it to the very first position:
 *
 * @stacked-example(Column Left, layout/layout-column-left.component)
 */
export class NbLayoutColumnComponent {
    /**
     * Move the column to the very left position in the layout.
     * @param {boolean} val
     */
    set left(val) {
        this.leftValue = convertToBoolProperty(val);
        this.startValue = false;
    }
    /**
     * Make column first in the layout.
     * @param {boolean} val
     */
    set start(val) {
        this.startValue = convertToBoolProperty(val);
        this.leftValue = false;
    }
}
NbLayoutColumnComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutColumnComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NbLayoutColumnComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbLayoutColumnComponent, selector: "nb-layout-column", inputs: { left: "left", start: "start" }, host: { properties: { "class.left": "this.leftValue", "class.start": "this.startValue" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutColumnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nb-layout-column',
                    template: `<ng-content></ng-content>`,
                }]
        }], propDecorators: { leftValue: [{
                type: HostBinding,
                args: ['class.left']
            }], startValue: [{
                type: HostBinding,
                args: ['class.start']
            }], left: [{
                type: Input
            }], start: [{
                type: Input
            }] } });
/**
 * Page header component.
 * Located on top of the page above the layout columns and sidebars.
 * Could be made `fixed` by setting the corresponding property. In the fixed mode the header becomes
 * sticky to the top of the nb-layout (to of the page). Here's an example:
 *
 * @stacked-example(Fixed Header, layout/layout-fixed-header.component)
 *
 * In a pair with sidebar it is possible to setup a configuration when header is placed on a side of the sidebar
 * and not on top of it. To achieve this simply put a `subheader` property to the header like this:
 * ```html
 * <nb-layout-header subheader></nb-layout-header>
 * ```
 * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)
 * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.
 *
 * Same way you can put both `fixed` and `clipped` headers adding creating a sub-header for your app:
 *
 * @stacked-example(Subheader, layout/layout-subheader.component)
 *
 * @styles
 *
 * header-background-color:
 * header-text-color:
 * header-text-font-family:
 * header-text-font-size:
 * header-text-font-weight:
 * header-text-line-height:
 * header-height:
 * header-padding:
 * header-shadow:
 */
export class NbLayoutHeaderComponent {
    constructor(layout) {
        this.layout = layout;
    }
    /**
     * Makes the header sticky to the top of the nb-layout.
     * @param {boolean} val
     */
    set fixed(val) {
        this.fixedValue = convertToBoolProperty(val);
    }
    /**
     * Places header on a side of the sidebar, and not above.
     * Disables fixed mode for this header and remove a shadow from the sidebar.
     * @param {boolean} val
     */
    set subheader(val) {
        this.subheaderValue = convertToBoolProperty(val);
        this.fixedValue = false;
        this.layout.withSubheader = this.subheaderValue;
    }
}
NbLayoutHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutHeaderComponent, deps: [{ token: NbLayoutComponent }], target: i0.ɵɵFactoryTarget.Component });
NbLayoutHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbLayoutHeaderComponent, selector: "nb-layout-header", inputs: { fixed: "fixed", subheader: "subheader" }, host: { properties: { "class.fixed": "this.fixedValue", "class.subheader": "this.subheaderValue" } }, ngImport: i0, template: `
    <nav [class.fixed]="fixedValue">
      <ng-content></ng-content>
    </nav>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nb-layout-header',
                    template: `
    <nav [class.fixed]="fixedValue">
      <ng-content></ng-content>
    </nav>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NbLayoutComponent }]; }, propDecorators: { fixedValue: [{
                type: HostBinding,
                args: ['class.fixed']
            }], subheaderValue: [{
                type: HostBinding,
                args: ['class.subheader']
            }], fixed: [{
                type: Input
            }], subheader: [{
                type: Input
            }] } });
/**
 * Page footer.
 * Located under the nb-layout content (specifically, under the columns).
 * Could be made `fixed`, becoming sticky to the bottom of the view port (window).
 *
 * @styles
 *
 * footer-background-color:
 * footer-text-color:
 * footer-text-font-family:
 * footer-text-font-size:
 * footer-text-font-weight:
 * footer-text-line-height:
 * footer-text-highlight-color:
 * footer-height:
 * footer-padding:
 * footer-divider-color:
 * footer-divider-style:
 * footer-divider-width:
 * footer-shadow:
 */
export class NbLayoutFooterComponent {
    /**
     * Makes the footer sticky to the bottom of the window.
     * @param {boolean} val
     */
    set fixed(val) {
        this.fixedValue = convertToBoolProperty(val);
    }
}
NbLayoutFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NbLayoutFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.4", type: NbLayoutFooterComponent, selector: "nb-layout-footer", inputs: { fixed: "fixed" }, host: { properties: { "class.fixed": "this.fixedValue" } }, ngImport: i0, template: `
    <nav [class.fixed]="fixedValue">
      <ng-content></ng-content>
    </nav>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbLayoutFooterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nb-layout-footer',
                    template: `
    <nav [class.fixed]="fixedValue">
      <ng-content></ng-content>
    </nav>
  `,
                }]
        }], propDecorators: { fixedValue: [{
                type: HostBinding,
                args: ['class.fixed']
            }], fixed: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvdGhlbWUvY29tcG9uZW50cy9sYXlvdXQvbGF5b3V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBR0wsU0FBUyxFQUNULGdCQUFnQixFQUNoQixNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFrQixNQUFNLFlBQVksQ0FBQztBQU9uRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7Ozs7QUFHN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBGRztBQXNCSCxNQUFNLE9BQU8saUJBQWlCO0lBYTVCOzs7T0FHRztJQUNILElBQ0ksTUFBTSxDQUFDLEdBQVk7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBR0Q7Ozs7OztPQU1HO0lBQ0gsSUFDSSxVQUFVLENBQUMsR0FBWTtRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdB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QUFjLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUNsRCxDQUFDOztvSEExQlUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsa05BTnhCOzs7O0dBSVQ7MkZBRVUsdUJBQXVCO2tCQVJuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRTs7OztHQUlUO2lCQUNGO3FHQUU2QixVQUFVO3NCQUFyQyxXQUFXO3VCQUFDLGFBQWE7Z0JBQ00sY0FBYztzQkFBN0MsV0FBVzt1QkFBQyxpQkFBaUI7Z0JBUzFCLEtBQUs7c0JBRFIsS0FBSztnQkFZRixTQUFTO3NCQURaLEtBQUs7O0FBU1I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBU0gsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQzs7O09BR0c7SUFDSCxJQUNJLEtBQUssQ0FBQyxHQUFZO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7b0hBVlUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsZ0pBTnhCOzs7O0dBSVQ7MkZBRVUsdUJBQXVCO2tCQVJuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRTs7OztHQUlUO2lCQUNGOzhCQUU2QixVQUFVO3NCQUFyQyxXQUFXO3VCQUFDLGFBQWE7Z0JBT3RCLEtBQUs7c0JBRFIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cblxuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sUHJvcGVydHksIE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBOYlRoZW1lU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RoZW1lLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJTcGlubmVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NwaW5uZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOYkxheW91dERpcmVjdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaXJlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOYlJlc3RvcmVTY3JvbGxUb3BIZWxwZXIgfSBmcm9tICcuL3Jlc3RvcmUtc2Nyb2xsLXRvcC5zZXJ2aWNlJztcbmltcG9ydCB7IE5iU2Nyb2xsUG9zaXRpb24sIE5iTGF5b3V0U2Nyb2xsU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Njcm9sbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5iTGF5b3V0RGltZW5zaW9ucywgTmJMYXlvdXRSdWxlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9ydWxlci5zZXJ2aWNlJztcbmltcG9ydCB7IE5CX1dJTkRPVywgTkJfRE9DVU1FTlQgfSBmcm9tICcuLi8uLi90aGVtZS5vcHRpb25zJztcbmltcG9ydCB7IE5iT3ZlcmxheUNvbnRhaW5lckFkYXB0ZXIgfSBmcm9tICcuLi9jZGsvYWRhcHRlci9vdmVybGF5LWNvbnRhaW5lci1hZGFwdGVyJztcblxuLyoqXG4gKiBMYXlvdXQgY29udGFpbmVyIGNvbXBvbmVudC5cbiAqIFdoZW4gdXNpbmcgd2l0aCBOZWJ1bGFyIFRoZW1lIFN5c3RlbSBpdCBpcyByZXF1aXJlZCB0aGF0IGFsbCBjaGlsZCBjb21wb25lbnRzIHNob3VsZCBiZSBwbGFjZWQgaW5zaWRlLlxuICpcbiAqIEJhc2ljIGV4YW1wbGUgb2YgdHdvIGNvbHVtbiBsYXlvdXQgd2l0aCBoZWFkZXI6XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTaG93Y2FzZSwgbGF5b3V0L2xheW91dC1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogQ2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBjb21wb25lbnRzIGluc2lkZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItbGF5b3V0PlxuICogIDxuYi1sYXlvdXQtaGVhZGVyPjwvbmItbGF5b3V0LWhlYWRlcj5cbiAqICA8bmItbGF5b3V0LWZvb3Rlcj48L25iLWxheW91dC1mb290ZXI+XG4gKiAgPG5iLWxheW91dC1jb2x1bW4+PC9uYi1sYXlvdXQtY29sdW1uPlxuICogIDxuYi1zaWRlYmFyPjwvbmItc2lkZWJhcj5cbiAqIDwvbmItbGF5b3V0PlxuICogYGBgXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYkxheW91dE1vZHVsZWAgdG8geW91ciBhcHAgbW9kdWxlLlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYkxheW91dE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqIEJ5IGRlZmF1bHQgdGhlIGxheW91dCBmaWxscyB1cCB0aGUgd2hvbGUgdmlldy1wb3J0LlxuICogVGhlIHdpbmRvdyBzY3JvbGxiYXJzIGFyZSBkaXNhYmxlZCBvbiB0aGUgYm9keSBhbmQgbW92ZWQgaW5zaWRlIG9mIHRoZSBuYi1sYXlvdXQsIHNvIHRoYXQgdGhlIHNjcm9sbGJhcnNcbiAqIHdvbid0IG1lc3Mgd2l0aCB0aGUgZml4ZWQgbmItaGVhZGVyLlxuICpcbiAqIFRoZSBjaGlsZCBjb21wb25lbnRzIGFyZSBwcm9qZWN0ZWQgaW50byBhIGZsZXhpYmxlIGxheW91dCBzdHJ1Y3R1cmUgYWxsb3dpbmcgdG8gYWRqdXN0IHRoZSBsYXlvdXQgYmVoYXZpb3JcbiAqIGJhc2VkIG9uIHRoZSBzZXR0aW5ncyBwcm92aWRlZC5cbiAqXG4gKiBUaGUgbGF5b3V0IGNvbnRlbnQgKGNvbHVtbnMpIGJlY29tZXMgY2VudGVyZWQgd2hlbiB0aGUgd2luZG93IHdpZHRoIGlzIG1vcmUgdGhhblxuICogdGhlIHZhbHVlIHNwZWNpZmllZCBpbiB0aGUgdGhlbWUgdmFyaWFibGUgYGxheW91dC1jb250ZW50LXdpZHRoYC5cbiAqXG4gKiBUaGUgbGF5b3V0IGFsc28gY29udGFpbnMgdGhlIGFyZWEgb24gdGhlIHZlcnkgdG9wICh0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIG5iLWxheW91dCksIHdoaWNoIGNvdWxkIGJlIHVzZWRcbiAqIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBzb21lIGNvbXBvbmVudHMgbGlrZSBtb2RhbHMgb3Igc3Bpbm5lcnMvbG9hZGVyc1xuICogc28gdGhhdCB0aGV5IGFyZSBsb2NhdGVkIG9uIHRvcCBvZiB0aGUgZWxlbWVudHMgaGllcmFyY2h5LlxuICogTW9yZSBkZXRhaWxzIGFyZSB1bmRlciB0aGUgYFRoZW1lU2VydmljZWAgc2VjdGlvbi5cbiAqXG4gKiBUaGUgbGF5b3V0IGNvbXBvbmVudCBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBjaGFuZ2luZyBhcHBsaWNhdGlvbiB0aGVtZXMuXG4gKiBJdCBsaXN0ZW5zIHRvIHRoZSBgdGhlbWVDaGFuZ2VgIGV2ZW50IGFuZCBjaGFuZ2UgYSB0aGVtZSBDU1MgY2xhc3MgYXBwZW5kZWQgdG8gYm9keS5cbiAqIEJhc2VkIG9uIHRoZSBjbGFzcyBhcHBlbmRlZCwgc3BlY2lmaWMgQ1NTLXRoZW1lIGlzIGFwcGxpZWQgdG8gdGhlIGFwcGxpY2F0aW9uLlxuICogTW9yZSBkZXRhaWxzIG9mIHRoZSBUaGVtZSBTeXN0ZW0gY291bGQgYmUgZm91bmQgaGVyZSBbRW5hYmxpbmcgVGhlbWUgU3lzdGVtXSgjL2RvY3MvY29uY2VwdHMvdGhlbWUtc3lzdGVtKVxuICpcbiAqIEEgc2ltcGxlIGxheW91dCB3aXRoIGZvb3RlcjpcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKExheW91dCBXaXRoIEZvb3RlciwgbGF5b3V0L2xheW91dC13LWZvb3Rlci5jb21wb25lbnQpXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gYXNrIHRoZSBsYXlvdXQgdG8gY2VudGVyIHRoZSBjb2x1bW5zIChub3RpY2U6IHdlIGFkZGVkIGEgYGNlbnRlcmAgYXR0cmlidXRlXG4gKiB0byB0aGUgbGF5b3V0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1sYXlvdXQgY2VudGVyPlxuICogICA8bmItbGF5b3V0LWhlYWRlcj5Bd2Vzb21lIENvbXBhbnk8L25iLWxheW91dC1oZWFkZXI+XG4gKlxuICogICA8bmItbGF5b3V0LWNvbHVtbj5cbiAqICAgICBIZWxsbyBXb3JsZCFcbiAqICAgPC9uYi1sYXlvdXQtY29sdW1uPlxuICpcbiAqICAgPG5iLWxheW91dC1mb290ZXI+Q29udGFjdCB1czwvbmItbGF5b3V0LWZvb3Rlcj5cbiAqIDwvbmItbGF5b3V0PlxuICogYGBgXG4gKlxuICogQHN0eWxlc1xuICpcbiAqIGxheW91dC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogbGF5b3V0LXRleHQtY29sb3I6XG4gKiBsYXlvdXQtdGV4dC1mb250LWZhbWlseTpcbiAqIGxheW91dC10ZXh0LWZvbnQtc2l6ZTpcbiAqIGxheW91dC10ZXh0LWZvbnQtd2VpZ2h0OlxuICogbGF5b3V0LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBsYXlvdXQtbWluLWhlaWdodDpcbiAqIGxheW91dC1jb250ZW50LXdpZHRoOlxuICogbGF5b3V0LXdpbmRvdy1tb2RlLW1pbi13aWR0aDpcbiAqIGxheW91dC13aW5kb3ctbW9kZS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogbGF5b3V0LXdpbmRvdy1tb2RlLXBhZGRpbmctdG9wOlxuICogbGF5b3V0LXdpbmRvdy1zaGFkb3c6XG4gKiBsYXlvdXQtcGFkZGluZzpcbiAqIGxheW91dC1tZWRpdW0tcGFkZGluZzpcbiAqIGxheW91dC1zbWFsbC1wYWRkaW5nOlxuICogbGF5b3V0LXNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogbGF5b3V0LXNjcm9sbGJhci1jb2xvcjpcbiAqIGxheW91dC1zY3JvbGxiYXItd2lkdGg6XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25iLWxheW91dCcsXG4gIHN0eWxlVXJsczogWycuL2xheW91dC5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJzY3JvbGxhYmxlLWNvbnRhaW5lclwiICNzY3JvbGxhYmxlQ29udGFpbmVyIChzY3JvbGwpPVwib25TY3JvbGwoJGV2ZW50KVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImxheW91dFwiICNsYXlvdXRDb250YWluZXI+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm5iLWxheW91dC1oZWFkZXI6bm90KFtzdWJoZWFkZXJdKVwiPjwvbmctY29udGVudD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxheW91dC1jb250YWluZXJcIj5cbiAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJuYi1zaWRlYmFyXCI+PC9uZy1jb250ZW50PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCIgW2NsYXNzLmNlbnRlcl09XCJjZW50ZXJWYWx1ZVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibmItbGF5b3V0LWhlYWRlcltzdWJoZWFkZXJdXCI+PC9uZy1jb250ZW50PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbHVtbnNcIj5cbiAgICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibmItbGF5b3V0LWNvbHVtblwiPjwvbmctY29udGVudD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibmItbGF5b3V0LWZvb3RlclwiPjwvbmctY29udGVudD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmJMYXlvdXRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgc2Nyb2xsQmxvY2tDbGFzcyA9ICduYi1nbG9iYWwtc2Nyb2xsYmxvY2snO1xuICBwcm90ZWN0ZWQgaXNTY3JvbGxCbG9ja2VkID0gZmFsc2U7XG4gIHByb3RlY3RlZCBzY3JvbGxhYmxlQ29udGFpbmVyT3ZlcmZsb3dPbGRWYWx1ZTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgbGF5b3V0UGFkZGluZ09sZFZhbHVlOiB7IGxlZnQ6IHN0cmluZzsgcmlnaHQ6IHN0cmluZyB9O1xuXG4gIGNlbnRlclZhbHVlOiBib29sZWFuID0gZmFsc2U7XG4gIHJlc3RvcmVTY3JvbGxUb3BWYWx1ZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy53aW5kb3ctbW9kZScpIHdpbmRvd01vZGVWYWx1ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLndpdGgtc2Nyb2xsJykgd2l0aFNjcm9sbFZhbHVlOiBib29sZWFuID0gZmFsc2U7XG4gIEBIb3N0QmluZGluZygnY2xhc3Mud2l0aC1zdWJoZWFkZXInKSB3aXRoU3ViaGVhZGVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciB0aGUgbGF5b3V0IGNvbHVtbnMgd2lsbCBiZSBjZW50ZXJlZCBhZnRlciBzb21lIHdpZHRoXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgY2VudGVyKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuY2VudGVyVmFsdWUgPSBjb252ZXJ0VG9Cb29sUHJvcGVydHkodmFsKTtcbiAgfVxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfY2VudGVyOiBOYkJvb2xlYW5JbnB1dDtcblxuICAvKipcbiAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBsYXlvdXQgZW50ZXJzIGEgJ3dpbmRvdycgbW9kZSwgd2hlbiB0aGUgbGF5b3V0IGNvbnRlbnQgKGluY2x1ZGluZyBzaWRlYmFycyBhbmQgZml4ZWQgaGVhZGVyKVxuICAgKiBiZWNvbWVzIGNlbnRlcmVkIGJ5IHdpZHRoIHdpdGggYSBtYXJnaW4gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4sIGxpa2UgYSBmbG9hdGluZyB3aW5kb3cuXG4gICAqIEF1dG9tYXRpY2FsbHkgZW5hYmxlcyBgd2l0aFNjcm9sbGAgbW9kZSwgYXMgaW4gdGhlIHdpbmRvdyBtb2RlIHNjcm9sbCBtdXN0IGJlIGluc2lkZSB0aGUgbGF5b3V0IGFuZCBjYW5ub3QgYmUgb25cbiAgICogd2luZG93LiAoVE9ETzogY2hlY2sgdGhpcylcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWxcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCB3aW5kb3dNb2RlKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMud2luZG93TW9kZVZhbHVlID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbCk7XG4gICAgdGhpcy53aXRoU2Nyb2xsID0gdGhpcy53aW5kb3dNb2RlVmFsdWU7XG4gIH1cbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3dpbmRvd01vZGU6IE5iQm9vbGVhbklucHV0O1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHdoZXRoZXIgdG8gbW92ZSB0aGUgc2Nyb2xsYmFycyB0byBsYXlvdXQgb3IgbGVhdmUgaXQgYXQgdGhlIGJvZHkgbGV2ZWwuXG4gICAqIEF1dG9tYXRpY2FsbHkgc2V0IHRvIHRydWUgd2hlbiBgd2luZG93TW9kZWAgaXMgZW5hYmxlZC5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWxcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCB3aXRoU2Nyb2xsKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMud2l0aFNjcm9sbFZhbHVlID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbCk7XG5cbiAgICAvLyBUT0RPOiBpcyB0aGlzIHRoZSBiZXN0IHdheSBvZiBkb2luZyBpdD8gYXMgd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gYm9keSBmcm9tIHRoZW1lIHN0eWxlc1xuICAgIC8vIFRPRE86IGFkZCBlMmUgdGVzdFxuICAgIGNvbnN0IGJvZHkgPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgaWYgKHRoaXMud2l0aFNjcm9sbFZhbHVlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGJvZHksICdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShib2R5LCAnb3ZlcmZsb3cnLCAnaW5pdGlhbCcpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfd2l0aFNjcm9sbDogTmJCb29sZWFuSW5wdXQ7XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlIGFmdGVyIG5hdmlnYXRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWxcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCByZXN0b3JlU2Nyb2xsVG9wKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMucmVzdG9yZVNjcm9sbFRvcFZhbHVlID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbCk7XG4gIH1cbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3Jlc3RvcmVTY3JvbGxUb3A6IE5iQm9vbGVhbklucHV0O1xuXG4gIC8vIFRPRE8gcmVtb3ZlIGFzIG9mIDUuMC4wXG4gIEBWaWV3Q2hpbGQoJ2xheW91dFRvcER5bmFtaWNBcmVhJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIHZlcnlUb3BSZWY6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgQFZpZXdDaGlsZCgnc2Nyb2xsYWJsZUNvbnRhaW5lcicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pXG4gIHNjcm9sbGFibGVDb250YWluZXJSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gIEBWaWV3Q2hpbGQoJ2xheW91dENvbnRhaW5lcicsIHsgcmVhZDogRWxlbWVudFJlZiB9KVxuICBsYXlvdXRDb250YWluZXJSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gIHByb3RlY3RlZCBhZnRlclZpZXdJbml0JCA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XG5cbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRoZW1lU2VydmljZTogTmJUaGVtZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHNwaW5uZXJTZXJ2aWNlOiBOYlNwaW5uZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIEBJbmplY3QoTkJfV0lORE9XKSBwcm90ZWN0ZWQgd2luZG93LFxuICAgIEBJbmplY3QoTkJfRE9DVU1FTlQpIHByb3RlY3RlZCBkb2N1bWVudCxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIHByb3RlY3RlZCBsYXlvdXREaXJlY3Rpb25TZXJ2aWNlOiBOYkxheW91dERpcmVjdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHNjcm9sbFNlcnZpY2U6IE5iTGF5b3V0U2Nyb2xsU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcnVsZXJTZXJ2aWNlOiBOYkxheW91dFJ1bGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsVG9wOiBOYlJlc3RvcmVTY3JvbGxUb3BIZWxwZXIsXG4gICAgcHJvdGVjdGVkIG92ZXJsYXlDb250YWluZXI6IE5iT3ZlcmxheUNvbnRhaW5lckFkYXB0ZXIsXG4gICkge1xuICAgIHRoaXMucmVnaXN0ZXJBc092ZXJsYXlDb250YWluZXIoKTtcblxuICAgIHRoaXMudGhlbWVTZXJ2aWNlXG4gICAgICAub25UaGVtZUNoYW5nZSgpXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpXG4gICAgICAuc3Vic2NyaWJlKCh0aGVtZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIGlmICh0aGVtZS5wcmV2aW91cykge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoYm9keSwgYG5iLXRoZW1lLSR7dGhlbWUucHJldmlvdXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhib2R5LCBgbmItdGhlbWUtJHt0aGVtZS5uYW1lfWApO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnRoZW1lU2VydmljZVxuICAgICAgLm9uQXBwZW5kTGF5b3V0Q2xhc3MoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy50aGVtZVNlcnZpY2VcbiAgICAgIC5vblJlbW92ZUxheW91dENsYXNzKClcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgIC5zdWJzY3JpYmUoKGNsYXNzTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuc3Bpbm5lclNlcnZpY2UucmVnaXN0ZXJMb2FkZXIoXG4gICAgICBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLmFmdGVyVmlld0luaXQkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKF8pID0+IHJlc29sdmUoKSk7XG4gICAgICB9KSxcbiAgICApO1xuICAgIHRoaXMuc3Bpbm5lclNlcnZpY2UubG9hZCgpO1xuXG4gICAgdGhpcy5ydWxlclNlcnZpY2VcbiAgICAgIC5vbkdldERpbWVuc2lvbnMoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoeyBsaXN0ZW5lciB9KSA9PiB7XG4gICAgICAgIGxpc3RlbmVyLm5leHQodGhpcy5nZXREaW1lbnNpb25zKCkpO1xuICAgICAgICBsaXN0ZW5lci5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnNjcm9sbFNlcnZpY2VcbiAgICAgIC5vbkdldFBvc2l0aW9uKClcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgIC5zdWJzY3JpYmUoKHsgbGlzdGVuZXIgfSkgPT4ge1xuICAgICAgICBsaXN0ZW5lci5uZXh0KHRoaXMuZ2V0U2Nyb2xsUG9zaXRpb24oKSk7XG4gICAgICAgIGxpc3RlbmVyLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAuc2hvdWxkUmVzdG9yZSgpXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKCgpID0+IHRoaXMucmVzdG9yZVNjcm9sbFRvcFZhbHVlKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsKDAsIDApO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnNjcm9sbFNlcnZpY2VcbiAgICAgIC5vblNjcm9sbGFibGVDaGFuZ2UoKVxuICAgICAgLnBpcGUoZmlsdGVyKCgpID0+IHRoaXMud2l0aFNjcm9sbFZhbHVlKSwgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoc2Nyb2xsYWJsZTogYm9vbGVhbikgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSB3aGVuIE5lYnVsYXIgTGF5b3V0IGN1c3RvbSBzY3JvbGwgYHdpdGhTY3JvbGxgIG1vZGUgaXMgZW5hYmxlZFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGRpc2FibGUgZGVmYXVsdCBDREsgc2Nyb2xsIGJsb2NrZXIgKEBsaW5rIE5iQmxvY2tTY3JvbGxTdHJhdGVneUFkYXB0ZXIpIG9uIEhUTUwgZWxlbWVudFxuICAgICAgICAgKiBzbyB0aGF0IGl0IHdvbid0IGFkZCBhZGRpdGlvbmFsIHBvc2l0aW9uaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHNjcm9sbGFibGUpIHtcbiAgICAgICAgICB0aGlzLmVuYWJsZVNjcm9sbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYmxvY2tTY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgLy8gdHJpZ2dlciBmaXJzdCB0aW1lIHNvIHRoYXQgYWZ0ZXIgdGhlIGNoYW5nZSB3ZSBoYXZlIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICB0aGlzLnRoZW1lU2VydmljZS5jaGFuZ2VXaW5kb3dXaWR0aCh0aGlzLndpbmRvdy5pbm5lcldpZHRoKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5sYXlvdXREaXJlY3Rpb25TZXJ2aWNlXG4gICAgICAub25EaXJlY3Rpb25DaGFuZ2UoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoZGlyZWN0aW9uKSA9PiAodGhpcy5kb2N1bWVudC5kaXIgPSBkaXJlY3Rpb24pKTtcblxuICAgIHRoaXMuc2Nyb2xsU2VydmljZVxuICAgICAgLm9uTWFudWFsU2Nyb2xsKClcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgIC5zdWJzY3JpYmUoKHsgeCwgeSB9OiBOYlNjcm9sbFBvc2l0aW9uKSA9PiB0aGlzLnNjcm9sbCh4LCB5KSk7XG5cbiAgICB0aGlzLmFmdGVyVmlld0luaXQkLm5leHQodHJ1ZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgdGhpcy51bnJlZ2lzdGVyQXNPdmVybGF5Q29udGFpbmVyKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6c2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgb25TY3JvbGwoJGV2ZW50KSB7XG4gICAgdGhpcy5zY3JvbGxTZXJ2aWNlLmZpcmVTY3JvbGxDaGFuZ2UoJGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudCddKVxuICBvblJlc2l6ZShldmVudCkge1xuICAgIHRoaXMudGhlbWVTZXJ2aWNlLmNoYW5nZVdpbmRvd1dpZHRoKGV2ZW50LnRhcmdldC5pbm5lcldpZHRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHNjcm9sbCBhbmQgY2xpZW50IGhlaWdodC93aWR0aFxuICAgKlxuICAgKiBEZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgc2Nyb2xsIG1vZGUgKGB3aXRoU2Nyb2xsPXRydWVgKSByZXR1cm5zIHNpemVzIGZyb20gdGhlIGJvZHkgZWxlbWVudFxuICAgKiBvciBmcm9tIHRoZSBgLnNjcm9sbGFibGUtY29udGFpbmVyYFxuICAgKiBAcmV0dXJucyB7TmJMYXlvdXREaW1lbnNpb25zfVxuICAgKi9cbiAgZ2V0RGltZW5zaW9ucygpOiBOYkxheW91dERpbWVuc2lvbnMge1xuICAgIGxldCBjbGllbnRXaWR0aCxcbiAgICAgIGNsaWVudEhlaWdodCxcbiAgICAgIHNjcm9sbFdpZHRoLFxuICAgICAgc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICBpZiAodGhpcy53aXRoU2Nyb2xsVmFsdWUpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuc2Nyb2xsYWJsZUNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgY2xpZW50V2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICBjbGllbnRIZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICAgICAgc2Nyb2xsV2lkdGggPSBjb250YWluZXIuc2Nyb2xsV2lkdGg7XG4gICAgICBzY3JvbGxIZWlnaHQgPSBjb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGRvY3VtZW50RWxlbWVudCwgYm9keSB9ID0gdGhpcy5kb2N1bWVudDtcbiAgICAgIGNsaWVudFdpZHRoID0gZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIHx8IGJvZHkuY2xpZW50V2lkdGg7XG4gICAgICBjbGllbnRIZWlnaHQgPSBkb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0O1xuICAgICAgc2Nyb2xsV2lkdGggPSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGggfHwgYm9keS5zY3JvbGxXaWR0aDtcbiAgICAgIHNjcm9sbEhlaWdodCA9IGRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgYm9keS5zY3JvbGxIZWlnaHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgY2xpZW50SGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGgsXG4gICAgICBzY3JvbGxIZWlnaHQsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHNjcm9sbCBwb3NpdGlvbiBvZiBjdXJyZW50IHNjcm9sbCBjb250YWluZXIuXG4gICAqXG4gICAqIElmIGB3aXRoU2Nyb2xsYCA9IHRydWUsIHJldHVybnMgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBgLnNjcm9sbGFibGUtY29udGFpbmVyYCBlbGVtZW50LFxuICAgKiBvdGhlcndpc2UgLSBvZiB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50IG9mIHRoZSB3aW5kb3cgKHdoaWNoIG1heSBiZSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9mIGEgYnJvd3NlcilcbiAgICpcbiAgICogQHJldHVybnMge05iU2Nyb2xsUG9zaXRpb259XG4gICAqL1xuICBnZXRTY3JvbGxQb3NpdGlvbigpOiBOYlNjcm9sbFBvc2l0aW9uIHtcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy53aXRoU2Nyb2xsVmFsdWUpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuc2Nyb2xsYWJsZUNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgcmV0dXJuIHsgeDogY29udGFpbmVyLnNjcm9sbExlZnQsIHk6IGNvbnRhaW5lci5zY3JvbGxUb3AgfTtcbiAgICB9XG5cbiAgICBjb25zdCBkb2N1bWVudFJlY3QgPSB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0IHggPVxuICAgICAgLWRvY3VtZW50UmVjdC5sZWZ0IHx8XG4gICAgICB0aGlzLmRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fFxuICAgICAgdGhpcy53aW5kb3cuc2Nyb2xsWCB8fFxuICAgICAgdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fFxuICAgICAgMDtcblxuICAgIGNvbnN0IHkgPVxuICAgICAgLWRvY3VtZW50UmVjdC50b3AgfHxcbiAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHxcbiAgICAgIHRoaXMud2luZG93LnNjcm9sbFkgfHxcbiAgICAgIHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fFxuICAgICAgMDtcblxuICAgIHJldHVybiB7IHgsIHkgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZWdpc3RlckFzT3ZlcmxheUNvbnRhaW5lcigpIHtcbiAgICBpZiAodGhpcy5vdmVybGF5Q29udGFpbmVyLnNldENvbnRhaW5lcikge1xuICAgICAgdGhpcy5vdmVybGF5Q29udGFpbmVyLnNldENvbnRhaW5lcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHVucmVnaXN0ZXJBc092ZXJsYXlDb250YWluZXIoKSB7XG4gICAgaWYgKHRoaXMub3ZlcmxheUNvbnRhaW5lci5jbGVhckNvbnRhaW5lcikge1xuICAgICAgdGhpcy5vdmVybGF5Q29udGFpbmVyLmNsZWFyQ29udGFpbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzY3JvbGwoeDogbnVtYmVyID0gbnVsbCwgeTogbnVtYmVyID0gbnVsbCkge1xuICAgIGNvbnN0IHsgeDogY3VycmVudFgsIHk6IGN1cnJlbnRZIH0gPSB0aGlzLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgeCA9IHggPT0gbnVsbCA/IGN1cnJlbnRYIDogeDtcbiAgICB5ID0geSA9PSBudWxsID8gY3VycmVudFkgOiB5O1xuXG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLndpdGhTY3JvbGxWYWx1ZSkge1xuICAgICAgY29uc3Qgc2Nyb2xsYWJsZSA9IHRoaXMuc2Nyb2xsYWJsZUNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgaWYgKHNjcm9sbGFibGUuc2Nyb2xsVG8pIHtcbiAgICAgICAgc2Nyb2xsYWJsZS5zY3JvbGxUbyh4LCB5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbGFibGUuc2Nyb2xsTGVmdCA9IHg7XG4gICAgICAgIHNjcm9sbGFibGUuc2Nyb2xsVG9wID0geTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aW5kb3cuc2Nyb2xsVG8oeCwgeSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogRXh0cmFjdCBpbnRvIGJsb2NrIHNjcm9sbCBzdHJhdGVneVxuICBwcm90ZWN0ZWQgYmxvY2tTY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuaXNTY3JvbGxCbG9ja2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pc1Njcm9sbEJsb2NrZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5zY3JvbGxCbG9ja0NsYXNzKTtcblxuICAgIGNvbnN0IHNjcm9sbGFibGVDb250YWluZXJFbGVtZW50ID0gdGhpcy5zY3JvbGxhYmxlQ29udGFpbmVyUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgbGF5b3V0RWxlbWVudCA9IHRoaXMubGF5b3V0Q29udGFpbmVyUmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBjb25zdCBsYXlvdXRXaXRoU2Nyb2xsV2lkdGggPSBsYXlvdXRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIHRoaXMuc2Nyb2xsYWJsZUNvbnRhaW5lck92ZXJmbG93T2xkVmFsdWUgPSBzY3JvbGxhYmxlQ29udGFpbmVyRWxlbWVudC5zdHlsZS5vdmVyZmxvdztcbiAgICBzY3JvbGxhYmxlQ29udGFpbmVyRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIGNvbnN0IGxheW91dFdpdGhvdXRTY3JvbGxXaWR0aCA9IGxheW91dEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY29uc3Qgc2Nyb2xsV2lkdGggPSBsYXlvdXRXaXRob3V0U2Nyb2xsV2lkdGggLSBsYXlvdXRXaXRoU2Nyb2xsV2lkdGg7XG5cbiAgICBpZiAoIXNjcm9sbFdpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sYXlvdXRQYWRkaW5nT2xkVmFsdWUgPSB7XG4gICAgICBsZWZ0OiBsYXlvdXRFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0LFxuICAgICAgcmlnaHQ6IGxheW91dEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5sYXlvdXREaXJlY3Rpb25TZXJ2aWNlLmlzTHRyKCkpIHtcbiAgICAgIGxheW91dEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c2Nyb2xsV2lkdGh9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXlvdXRFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7c2Nyb2xsV2lkdGh9cHhgO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW5hYmxlU2Nyb2xsKCkge1xuICAgIGlmICh0aGlzLmlzU2Nyb2xsQmxvY2tlZCkge1xuICAgICAgdGhpcy5pc1Njcm9sbEJsb2NrZWQgPSBmYWxzZTtcblxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5zY3JvbGxCbG9ja0NsYXNzKTtcbiAgICAgIHRoaXMuc2Nyb2xsYWJsZUNvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5zY3JvbGxhYmxlQ29udGFpbmVyT3ZlcmZsb3dPbGRWYWx1ZTtcblxuICAgICAgaWYgKHRoaXMubGF5b3V0UGFkZGluZ09sZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGxheW91dEVsZW1lbnQgPSB0aGlzLmxheW91dENvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICBsYXlvdXRFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5sYXlvdXRQYWRkaW5nT2xkVmFsdWUubGVmdDtcbiAgICAgICAgbGF5b3V0RWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLmxheW91dFBhZGRpbmdPbGRWYWx1ZS5yaWdodDtcbiAgICAgICAgdGhpcy5sYXlvdXRQYWRkaW5nT2xkVmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGNvbXBvbmVudCB3aGljaCBkZXRlcm1pbmVzIGEgY29udGVudCBwb3NpdGlvbiBpbnNpZGUgb2YgdGhlIGxheW91dC5cbiAqIFRoZSBsYXlvdXQgY291bGQgY29udGFpbiB1bmxpbWl0ZWQgY29sdW1ucyAobm90IGluY2x1ZGluZyB0aGUgc2lkZWJhcnMpLlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGNvbHVtbnMgYXJlIG9yZGVyZWQgZnJvbSB0aGUgbGVmdCB0byB0aGUgcmlnaHQsXG4gKiBidXQgaXQncyBhbHNvIHBvc3NpYmxlIHRvIG92ZXJ3cml0ZSB0aGlzIGJlaGF2aW9yIGJ5IHNldHRpbmcgYSBgbGVmdGAgYXR0cmlidXRlIHRvIHRoZSBjb2x1bW4sXG4gKiBtb3ZpbmcgaXQgdG8gdGhlIHZlcnkgZmlyc3QgcG9zaXRpb246XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShDb2x1bW4gTGVmdCwgbGF5b3V0L2xheW91dC1jb2x1bW4tbGVmdC5jb21wb25lbnQpXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25iLWxheW91dC1jb2x1bW4nLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxufSlcbmV4cG9ydCBjbGFzcyBOYkxheW91dENvbHVtbkNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MubGVmdCcpIGxlZnRWYWx1ZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zdGFydCcpIHN0YXJ0VmFsdWU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGNvbHVtbiB0byB0aGUgdmVyeSBsZWZ0IHBvc2l0aW9uIGluIHRoZSBsYXlvdXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbGVmdCh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmxlZnRWYWx1ZSA9IGNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWwpO1xuICAgIHRoaXMuc3RhcnRWYWx1ZSA9IGZhbHNlO1xuICB9XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9sZWZ0OiBOYkJvb2xlYW5JbnB1dDtcblxuICAvKipcbiAgICogTWFrZSBjb2x1bW4gZmlyc3QgaW4gdGhlIGxheW91dC5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWxcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBzdGFydCh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnN0YXJ0VmFsdWUgPSBjb252ZXJ0VG9Cb29sUHJvcGVydHkodmFsKTtcbiAgICB0aGlzLmxlZnRWYWx1ZSA9IGZhbHNlO1xuICB9XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zdGFydDogTmJCb29sZWFuSW5wdXQ7XG59XG5cbi8qKlxuICogUGFnZSBoZWFkZXIgY29tcG9uZW50LlxuICogTG9jYXRlZCBvbiB0b3Agb2YgdGhlIHBhZ2UgYWJvdmUgdGhlIGxheW91dCBjb2x1bW5zIGFuZCBzaWRlYmFycy5cbiAqIENvdWxkIGJlIG1hZGUgYGZpeGVkYCBieSBzZXR0aW5nIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5LiBJbiB0aGUgZml4ZWQgbW9kZSB0aGUgaGVhZGVyIGJlY29tZXNcbiAqIHN0aWNreSB0byB0aGUgdG9wIG9mIHRoZSBuYi1sYXlvdXQgKHRvIG9mIHRoZSBwYWdlKS4gSGVyZSdzIGFuIGV4YW1wbGU6XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShGaXhlZCBIZWFkZXIsIGxheW91dC9sYXlvdXQtZml4ZWQtaGVhZGVyLmNvbXBvbmVudClcbiAqXG4gKiBJbiBhIHBhaXIgd2l0aCBzaWRlYmFyIGl0IGlzIHBvc3NpYmxlIHRvIHNldHVwIGEgY29uZmlndXJhdGlvbiB3aGVuIGhlYWRlciBpcyBwbGFjZWQgb24gYSBzaWRlIG9mIHRoZSBzaWRlYmFyXG4gKiBhbmQgbm90IG9uIHRvcCBvZiBpdC4gVG8gYWNoaWV2ZSB0aGlzIHNpbXBseSBwdXQgYSBgc3ViaGVhZGVyYCBwcm9wZXJ0eSB0byB0aGUgaGVhZGVyIGxpa2UgdGhpczpcbiAqIGBgYGh0bWxcbiAqIDxuYi1sYXlvdXQtaGVhZGVyIHN1YmhlYWRlcj48L25iLWxheW91dC1oZWFkZXI+XG4gKiBgYGBcbiAqIEBzdGFja2VkLWV4YW1wbGUoU3ViaGVhZGVyLCBsYXlvdXQvbGF5b3V0LXNpZGViYXItc3ViaGVhZGVyLmNvbXBvbmVudClcbiAqIE5vdGUgdGhhdCBpbiBzdWNoIGNvbmZpZ3VyYXRpb24gc2lkZWJhciBzaGFkb3cgaXMgcmVtb3ZlZCBhbmQgaGVhZGVyIGNhbm5vdCBiZSBtYWtlIGBmaXhlZGAuXG4gKlxuICogU2FtZSB3YXkgeW91IGNhbiBwdXQgYm90aCBgZml4ZWRgIGFuZCBgY2xpcHBlZGAgaGVhZGVycyBhZGRpbmcgY3JlYXRpbmcgYSBzdWItaGVhZGVyIGZvciB5b3VyIGFwcDpcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFN1YmhlYWRlciwgbGF5b3V0L2xheW91dC1zdWJoZWFkZXIuY29tcG9uZW50KVxuICpcbiAqIEBzdHlsZXNcbiAqXG4gKiBoZWFkZXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIGhlYWRlci10ZXh0LWNvbG9yOlxuICogaGVhZGVyLXRleHQtZm9udC1mYW1pbHk6XG4gKiBoZWFkZXItdGV4dC1mb250LXNpemU6XG4gKiBoZWFkZXItdGV4dC1mb250LXdlaWdodDpcbiAqIGhlYWRlci10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaGVhZGVyLWhlaWdodDpcbiAqIGhlYWRlci1wYWRkaW5nOlxuICogaGVhZGVyLXNoYWRvdzpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmItbGF5b3V0LWhlYWRlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5hdiBbY2xhc3MuZml4ZWRdPVwiZml4ZWRWYWx1ZVwiPlxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvbmF2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOYkxheW91dEhlYWRlckNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuZml4ZWQnKSBmaXhlZFZhbHVlOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnN1YmhlYWRlcicpIHN1YmhlYWRlclZhbHVlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGF5b3V0OiBOYkxheW91dENvbXBvbmVudCkge31cblxuICAvKipcbiAgICogTWFrZXMgdGhlIGhlYWRlciBzdGlja3kgdG8gdGhlIHRvcCBvZiB0aGUgbmItbGF5b3V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbFxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGZpeGVkKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuZml4ZWRWYWx1ZSA9IGNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWwpO1xuICB9XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9maXhlZDogTmJCb29sZWFuSW5wdXQ7XG5cbiAgLyoqXG4gICAqIFBsYWNlcyBoZWFkZXIgb24gYSBzaWRlIG9mIHRoZSBzaWRlYmFyLCBhbmQgbm90IGFib3ZlLlxuICAgKiBEaXNhYmxlcyBmaXhlZCBtb2RlIGZvciB0aGlzIGhlYWRlciBhbmQgcmVtb3ZlIGEgc2hhZG93IGZyb20gdGhlIHNpZGViYXIuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgc3ViaGVhZGVyKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuc3ViaGVhZGVyVmFsdWUgPSBjb252ZXJ0VG9Cb29sUHJvcGVydHkodmFsKTtcbiAgICB0aGlzLmZpeGVkVmFsdWUgPSBmYWxzZTtcbiAgICB0aGlzLmxheW91dC53aXRoU3ViaGVhZGVyID0gdGhpcy5zdWJoZWFkZXJWYWx1ZTtcbiAgfVxuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc3ViaGVhZGVyOiBOYkJvb2xlYW5JbnB1dDtcbn1cblxuLyoqXG4gKiBQYWdlIGZvb3Rlci5cbiAqIExvY2F0ZWQgdW5kZXIgdGhlIG5iLWxheW91dCBjb250ZW50IChzcGVjaWZpY2FsbHksIHVuZGVyIHRoZSBjb2x1bW5zKS5cbiAqIENvdWxkIGJlIG1hZGUgYGZpeGVkYCwgYmVjb21pbmcgc3RpY2t5IHRvIHRoZSBib3R0b20gb2YgdGhlIHZpZXcgcG9ydCAod2luZG93KS5cbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogZm9vdGVyLWJhY2tncm91bmQtY29sb3I6XG4gKiBmb290ZXItdGV4dC1jb2xvcjpcbiAqIGZvb3Rlci10ZXh0LWZvbnQtZmFtaWx5OlxuICogZm9vdGVyLXRleHQtZm9udC1zaXplOlxuICogZm9vdGVyLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBmb290ZXItdGV4dC1saW5lLWhlaWdodDpcbiAqIGZvb3Rlci10ZXh0LWhpZ2hsaWdodC1jb2xvcjpcbiAqIGZvb3Rlci1oZWlnaHQ6XG4gKiBmb290ZXItcGFkZGluZzpcbiAqIGZvb3Rlci1kaXZpZGVyLWNvbG9yOlxuICogZm9vdGVyLWRpdmlkZXItc3R5bGU6XG4gKiBmb290ZXItZGl2aWRlci13aWR0aDpcbiAqIGZvb3Rlci1zaGFkb3c6XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25iLWxheW91dC1mb290ZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuYXYgW2NsYXNzLmZpeGVkXT1cImZpeGVkVmFsdWVcIj5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L25hdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmJMYXlvdXRGb290ZXJDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZpeGVkJykgZml4ZWRWYWx1ZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogTWFrZXMgdGhlIGZvb3RlciBzdGlja3kgdG8gdGhlIGJvdHRvbSBvZiB0aGUgd2luZG93LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbFxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGZpeGVkKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuZml4ZWRWYWx1ZSA9IGNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWwpO1xuICB9XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9maXhlZDogTmJCb29sZWFuSW5wdXQ7XG59XG4iXX0=