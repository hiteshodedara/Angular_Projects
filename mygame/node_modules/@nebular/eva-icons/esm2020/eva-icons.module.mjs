/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { NgModule } from '@angular/core';
import { NbSvgIcon } from '@nebular/theme';
import { icons } from 'eva-icons';
import * as i0 from "@angular/core";
import * as i1 from "@nebular/theme";
export class NbEvaSvgIcon extends NbSvgIcon {
    constructor(name, content) {
        super(name, '');
        this.name = name;
        this.content = content;
    }
    getContent(options) {
        return this.content.toSvg({
            width: '100%',
            height: '100%',
            fill: 'currentColor',
            ...options,
        });
    }
}
export class NbEvaIconsModule {
    constructor(iconLibrary) {
        this.NAME = 'eva';
        iconLibrary.registerSvgPack(this.NAME, this.createIcons());
        iconLibrary.setDefaultPack(this.NAME);
    }
    createIcons() {
        return Object
            .entries(icons)
            .map(([name, icon]) => {
            return [name, new NbEvaSvgIcon(name, icon)];
        })
            .reduce((newIcons, [name, icon]) => {
            newIcons[name] = icon;
            return newIcons;
        }, {});
    }
}
NbEvaIconsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbEvaIconsModule, deps: [{ token: i1.NbIconLibraries }], target: i0.ɵɵFactoryTarget.NgModule });
NbEvaIconsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: NbEvaIconsModule });
NbEvaIconsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbEvaIconsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NbEvaIconsModule, decorators: [{
            type: NgModule,
            args: [{}]
        }], ctorParameters: function () { return [{ type: i1.NbIconLibraries }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhLWljb25zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvZXZhLWljb25zL2V2YS1pY29ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFtQixTQUFTLEVBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFpQmxDLE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBUztJQUV6QyxZQUFzQixJQUFJLEVBQVksT0FBMEI7UUFDOUQsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQURJLFNBQUksR0FBSixJQUFJLENBQUE7UUFBWSxZQUFPLEdBQVAsT0FBTyxDQUFtQjtJQUVoRSxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUN4QixLQUFLLEVBQUUsTUFBTTtZQUNiLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLGNBQWM7WUFDcEIsR0FBRyxPQUFPO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLGdCQUFnQjtJQUkzQixZQUFZLFdBQTRCO1FBRmhDLFNBQUksR0FBRyxLQUFLLENBQUM7UUFHbkIsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNELFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTyxXQUFXO1FBQ2pCLE9BQU8sTUFBTTthQUNWLE9BQU8sQ0FBb0IsS0FBSyxDQUFDO2FBQ2pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQXdCLENBQUM7UUFDckUsQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBc0IsRUFBRSxFQUFFO1lBQ3RELFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDdEIsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7NkdBbkJVLGdCQUFnQjs4R0FBaEIsZ0JBQWdCOzhHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFENUIsUUFBUTttQkFBQyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5cbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkljb25MaWJyYXJpZXMsIE5iU3ZnSWNvbiwgTmJJY29ucyB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lJztcbmltcG9ydCB7IGljb25zIH0gZnJvbSAnZXZhLWljb25zJztcblxuaW50ZXJmYWNlIE5iT3JpZ2luYWxFdmFJY29uIHtcbiAgdG9Tdmcob3B0aW9uczogTmJFdmFJY29uT3B0aW9ucyk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmJFdmFJY29uT3B0aW9ucyB7XG4gIHdpZHRoOiBzdHJpbmcsXG4gIGhlaWdodDogc3RyaW5nLFxuICBmaWxsOiBzdHJpbmcsXG4gIGFuaW1hdGlvbjoge1xuICAgIHR5cGU6IHN0cmluZyxcbiAgICBob3ZlcjogYm9vbGVhbixcbiAgICBpbmZpbml0ZTogYm9vbGVhbixcbiAgfSxcbn1cblxuZXhwb3J0IGNsYXNzIE5iRXZhU3ZnSWNvbiBleHRlbmRzIE5iU3ZnSWNvbiB7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG5hbWUsIHByb3RlY3RlZCBjb250ZW50OiBOYk9yaWdpbmFsRXZhSWNvbikge1xuICAgIHN1cGVyKG5hbWUsICcnKTtcbiAgfVxuXG4gIGdldENvbnRlbnQob3B0aW9ucyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC50b1N2Zyh7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIE5iRXZhSWNvbnNNb2R1bGUge1xuXG4gIHByaXZhdGUgTkFNRSA9ICdldmEnO1xuXG4gIGNvbnN0cnVjdG9yKGljb25MaWJyYXJ5OiBOYkljb25MaWJyYXJpZXMpIHtcbiAgICBpY29uTGlicmFyeS5yZWdpc3RlclN2Z1BhY2sodGhpcy5OQU1FLCB0aGlzLmNyZWF0ZUljb25zKCkpO1xuICAgIGljb25MaWJyYXJ5LnNldERlZmF1bHRQYWNrKHRoaXMuTkFNRSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUljb25zKCk6IE5iSWNvbnMge1xuICAgIHJldHVybiBPYmplY3RcbiAgICAgIC5lbnRyaWVzPE5iT3JpZ2luYWxFdmFJY29uPihpY29ucylcbiAgICAgIC5tYXAoKFtuYW1lLCBpY29uXSkgPT4ge1xuICAgICAgICByZXR1cm4gW25hbWUsIG5ldyBOYkV2YVN2Z0ljb24obmFtZSwgaWNvbildIGFzIFtzdHJpbmcsIE5iU3ZnSWNvbl07XG4gICAgICB9KVxuICAgICAgLnJlZHVjZSgobmV3SWNvbnMsIFtuYW1lLCBpY29uXTogW3N0cmluZywgTmJTdmdJY29uXSkgPT4ge1xuICAgICAgICBuZXdJY29uc1tuYW1lXSA9IGljb247XG4gICAgICAgIHJldHVybiBuZXdJY29ucztcbiAgICAgIH0sIHt9KTtcbiAgfVxufVxuIl19